
Lab_4-3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031e4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080032f0  080032f0  000042f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003314  08003314  000050b8  2**0
                  CONTENTS
  4 .ARM          00000000  08003314  08003314  000050b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003314  08003314  000050b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003314  08003314  00004314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003318  08003318  00004318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  0800331c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  200000b8  080033d4  000050b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  080033d4  000052ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000050b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000920b  00000000  00000000  000050e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022d0  00000000  00000000  0000e2ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b60  00000000  00000000  000105c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000087a  00000000  00000000  00011120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001865b  00000000  00000000  0001199a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f857  00000000  00000000  00029ff5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085fa7  00000000  00000000  0003984c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bf7f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e58  00000000  00000000  000bf838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000c2690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b8 	.word	0x200000b8
 8000128:	00000000 	.word	0x00000000
 800012c:	080032d8 	.word	0x080032d8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000bc 	.word	0x200000bc
 8000148:	080032d8 	.word	0x080032d8

0800014c <display7SEG>:
int led_buffer[] = { 0, 0, 0, 0 };
int index_led = 0;


void display7SEG(int index)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	switch(index)
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b03      	cmp	r3, #3
 8000158:	f200 844d 	bhi.w	80009f6 <display7SEG+0x8aa>
 800015c:	a201      	add	r2, pc, #4	@ (adr r2, 8000164 <display7SEG+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	08000175 	.word	0x08000175
 8000168:	08000381 	.word	0x08000381
 800016c:	080005ad 	.word	0x080005ad
 8000170:	080007d9 	.word	0x080007d9
   	{

   	    case 0:
   	      if(index_led >= 0 && index_led <= 3)
 8000174:	4bc5      	ldr	r3, [pc, #788]	@ (800048c <display7SEG+0x340>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b00      	cmp	r3, #0
 800017a:	f2c0 843e 	blt.w	80009fa <display7SEG+0x8ae>
 800017e:	4bc3      	ldr	r3, [pc, #780]	@ (800048c <display7SEG+0x340>)
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	2b03      	cmp	r3, #3
 8000184:	f300 8439 	bgt.w	80009fa <display7SEG+0x8ae>
   	      {
   	    	switch(led_buffer[index_led])
 8000188:	4bc0      	ldr	r3, [pc, #768]	@ (800048c <display7SEG+0x340>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	4ac0      	ldr	r2, [pc, #768]	@ (8000490 <display7SEG+0x344>)
 800018e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000192:	2b09      	cmp	r3, #9
 8000194:	f200 80ef 	bhi.w	8000376 <display7SEG+0x22a>
 8000198:	a201      	add	r2, pc, #4	@ (adr r2, 80001a0 <display7SEG+0x54>)
 800019a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800019e:	bf00      	nop
 80001a0:	080001c9 	.word	0x080001c9
 80001a4:	080001f5 	.word	0x080001f5
 80001a8:	08000221 	.word	0x08000221
 80001ac:	0800024d 	.word	0x0800024d
 80001b0:	08000279 	.word	0x08000279
 80001b4:	080002a5 	.word	0x080002a5
 80001b8:	080002d1 	.word	0x080002d1
 80001bc:	080002fd 	.word	0x080002fd
 80001c0:	08000329 	.word	0x08000329
 80001c4:	0800034b 	.word	0x0800034b
   	    	{
   	    	    case 0:
   	    	    	 HAL_GPIO_WritePin(GPIOB, EN0_Pin, RESET);
 80001c8:	2200      	movs	r2, #0
 80001ca:	2180      	movs	r1, #128	@ 0x80
 80001cc:	48b1      	ldr	r0, [pc, #708]	@ (8000494 <display7SEG+0x348>)
 80001ce:	f001 ff4e 	bl	800206e <HAL_GPIO_WritePin>
   	    	    	 HAL_GPIO_WritePin(GPIOB, EN1_Pin | EN2_Pin | EN3_Pin, SET);
 80001d2:	2201      	movs	r2, #1
 80001d4:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80001d8:	48ae      	ldr	r0, [pc, #696]	@ (8000494 <display7SEG+0x348>)
 80001da:	f001 ff48 	bl	800206e <HAL_GPIO_WritePin>
   	    	    	 HAL_GPIO_WritePin(GPIOB, SEG_6_Pin, SET);
 80001de:	2201      	movs	r2, #1
 80001e0:	2140      	movs	r1, #64	@ 0x40
 80001e2:	48ac      	ldr	r0, [pc, #688]	@ (8000494 <display7SEG+0x348>)
 80001e4:	f001 ff43 	bl	800206e <HAL_GPIO_WritePin>
   	    	    	 HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_1_Pin | SEG_2_Pin | SEG_3_Pin | SEG_4_Pin | SEG_5_Pin , RESET);
 80001e8:	2200      	movs	r2, #0
 80001ea:	213f      	movs	r1, #63	@ 0x3f
 80001ec:	48a9      	ldr	r0, [pc, #676]	@ (8000494 <display7SEG+0x348>)
 80001ee:	f001 ff3e 	bl	800206e <HAL_GPIO_WritePin>
   	    	         break;
 80001f2:	e0c1      	b.n	8000378 <display7SEG+0x22c>
   	    	    case 1:
   	    	    	 HAL_GPIO_WritePin(GPIOB, EN0_Pin, RESET);
 80001f4:	2200      	movs	r2, #0
 80001f6:	2180      	movs	r1, #128	@ 0x80
 80001f8:	48a6      	ldr	r0, [pc, #664]	@ (8000494 <display7SEG+0x348>)
 80001fa:	f001 ff38 	bl	800206e <HAL_GPIO_WritePin>
   	    	    	 HAL_GPIO_WritePin(GPIOB, EN1_Pin | EN2_Pin | EN3_Pin, SET);
 80001fe:	2201      	movs	r2, #1
 8000200:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8000204:	48a3      	ldr	r0, [pc, #652]	@ (8000494 <display7SEG+0x348>)
 8000206:	f001 ff32 	bl	800206e <HAL_GPIO_WritePin>
   	    	    	 HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_3_Pin | SEG_4_Pin | SEG_5_Pin | SEG_6_Pin, SET);
 800020a:	2201      	movs	r2, #1
 800020c:	2179      	movs	r1, #121	@ 0x79
 800020e:	48a1      	ldr	r0, [pc, #644]	@ (8000494 <display7SEG+0x348>)
 8000210:	f001 ff2d 	bl	800206e <HAL_GPIO_WritePin>
   	    	    	 HAL_GPIO_WritePin(GPIOB, SEG_1_Pin | SEG_2_Pin, RESET);
 8000214:	2200      	movs	r2, #0
 8000216:	2106      	movs	r1, #6
 8000218:	489e      	ldr	r0, [pc, #632]	@ (8000494 <display7SEG+0x348>)
 800021a:	f001 ff28 	bl	800206e <HAL_GPIO_WritePin>
   	    	    	 break;
 800021e:	e0ab      	b.n	8000378 <display7SEG+0x22c>
   	    	    case 2:
   	    	    	HAL_GPIO_WritePin(GPIOB, EN0_Pin, RESET);
 8000220:	2200      	movs	r2, #0
 8000222:	2180      	movs	r1, #128	@ 0x80
 8000224:	489b      	ldr	r0, [pc, #620]	@ (8000494 <display7SEG+0x348>)
 8000226:	f001 ff22 	bl	800206e <HAL_GPIO_WritePin>
   	    	        HAL_GPIO_WritePin(GPIOB, EN1_Pin | EN2_Pin | EN3_Pin, SET);
 800022a:	2201      	movs	r2, #1
 800022c:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8000230:	4898      	ldr	r0, [pc, #608]	@ (8000494 <display7SEG+0x348>)
 8000232:	f001 ff1c 	bl	800206e <HAL_GPIO_WritePin>
   	    	    	HAL_GPIO_WritePin(GPIOB, SEG_2_Pin | SEG_5_Pin , SET);
 8000236:	2201      	movs	r2, #1
 8000238:	2124      	movs	r1, #36	@ 0x24
 800023a:	4896      	ldr	r0, [pc, #600]	@ (8000494 <display7SEG+0x348>)
 800023c:	f001 ff17 	bl	800206e <HAL_GPIO_WritePin>
   	    	        HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_1_Pin |SEG_3_Pin | SEG_4_Pin | SEG_6_Pin, RESET);
 8000240:	2200      	movs	r2, #0
 8000242:	215b      	movs	r1, #91	@ 0x5b
 8000244:	4893      	ldr	r0, [pc, #588]	@ (8000494 <display7SEG+0x348>)
 8000246:	f001 ff12 	bl	800206e <HAL_GPIO_WritePin>
   	    	        break;
 800024a:	e095      	b.n	8000378 <display7SEG+0x22c>
   	    	    case 3:
   	    	    	HAL_GPIO_WritePin(GPIOB, EN0_Pin, RESET);
 800024c:	2200      	movs	r2, #0
 800024e:	2180      	movs	r1, #128	@ 0x80
 8000250:	4890      	ldr	r0, [pc, #576]	@ (8000494 <display7SEG+0x348>)
 8000252:	f001 ff0c 	bl	800206e <HAL_GPIO_WritePin>
   	    	    	HAL_GPIO_WritePin(GPIOB, EN1_Pin | EN2_Pin | EN3_Pin, SET);
 8000256:	2201      	movs	r2, #1
 8000258:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800025c:	488d      	ldr	r0, [pc, #564]	@ (8000494 <display7SEG+0x348>)
 800025e:	f001 ff06 	bl	800206e <HAL_GPIO_WritePin>
   	    	        HAL_GPIO_WritePin(GPIOB, SEG_4_Pin | SEG_5_Pin , SET);
 8000262:	2201      	movs	r2, #1
 8000264:	2130      	movs	r1, #48	@ 0x30
 8000266:	488b      	ldr	r0, [pc, #556]	@ (8000494 <display7SEG+0x348>)
 8000268:	f001 ff01 	bl	800206e <HAL_GPIO_WritePin>
   	    	    	HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_1_Pin |SEG_2_Pin | SEG_3_Pin | SEG_6_Pin, RESET);
 800026c:	2200      	movs	r2, #0
 800026e:	214f      	movs	r1, #79	@ 0x4f
 8000270:	4888      	ldr	r0, [pc, #544]	@ (8000494 <display7SEG+0x348>)
 8000272:	f001 fefc 	bl	800206e <HAL_GPIO_WritePin>
   	    	    	break;
 8000276:	e07f      	b.n	8000378 <display7SEG+0x22c>
   	    	    case 4:
   	    	    	HAL_GPIO_WritePin(GPIOB, EN0_Pin, RESET);
 8000278:	2200      	movs	r2, #0
 800027a:	2180      	movs	r1, #128	@ 0x80
 800027c:	4885      	ldr	r0, [pc, #532]	@ (8000494 <display7SEG+0x348>)
 800027e:	f001 fef6 	bl	800206e <HAL_GPIO_WritePin>
   	    	    	HAL_GPIO_WritePin(GPIOB, EN1_Pin | EN2_Pin | EN3_Pin, SET);
 8000282:	2201      	movs	r2, #1
 8000284:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8000288:	4882      	ldr	r0, [pc, #520]	@ (8000494 <display7SEG+0x348>)
 800028a:	f001 fef0 	bl	800206e <HAL_GPIO_WritePin>
   	    	    	HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_3_Pin | SEG_4_Pin , SET);
 800028e:	2201      	movs	r2, #1
 8000290:	2119      	movs	r1, #25
 8000292:	4880      	ldr	r0, [pc, #512]	@ (8000494 <display7SEG+0x348>)
 8000294:	f001 feeb 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_1_Pin |SEG_2_Pin | SEG_5_Pin | SEG_6_Pin, RESET);
 8000298:	2200      	movs	r2, #0
 800029a:	2166      	movs	r1, #102	@ 0x66
 800029c:	487d      	ldr	r0, [pc, #500]	@ (8000494 <display7SEG+0x348>)
 800029e:	f001 fee6 	bl	800206e <HAL_GPIO_WritePin>
   	    	    	break;
 80002a2:	e069      	b.n	8000378 <display7SEG+0x22c>
   	    	    case 5:
   	    	    	HAL_GPIO_WritePin(GPIOB, EN0_Pin, RESET);
 80002a4:	2200      	movs	r2, #0
 80002a6:	2180      	movs	r1, #128	@ 0x80
 80002a8:	487a      	ldr	r0, [pc, #488]	@ (8000494 <display7SEG+0x348>)
 80002aa:	f001 fee0 	bl	800206e <HAL_GPIO_WritePin>
   	    	    	HAL_GPIO_WritePin(GPIOB, EN1_Pin | EN2_Pin | EN3_Pin, SET);
 80002ae:	2201      	movs	r2, #1
 80002b0:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80002b4:	4877      	ldr	r0, [pc, #476]	@ (8000494 <display7SEG+0x348>)
 80002b6:	f001 feda 	bl	800206e <HAL_GPIO_WritePin>
   	    	        HAL_GPIO_WritePin(GPIOB, SEG_1_Pin | SEG_4_Pin , SET);
 80002ba:	2201      	movs	r2, #1
 80002bc:	2112      	movs	r1, #18
 80002be:	4875      	ldr	r0, [pc, #468]	@ (8000494 <display7SEG+0x348>)
 80002c0:	f001 fed5 	bl	800206e <HAL_GPIO_WritePin>
   	    	    	HAL_GPIO_WritePin(GPIOB, SEG_0_Pin |SEG_2_Pin | SEG_3_Pin | SEG_5_Pin | SEG_6_Pin, RESET);
 80002c4:	2200      	movs	r2, #0
 80002c6:	216d      	movs	r1, #109	@ 0x6d
 80002c8:	4872      	ldr	r0, [pc, #456]	@ (8000494 <display7SEG+0x348>)
 80002ca:	f001 fed0 	bl	800206e <HAL_GPIO_WritePin>
   	    	        break;
 80002ce:	e053      	b.n	8000378 <display7SEG+0x22c>
   	    	    case 6:
   	    	    	HAL_GPIO_WritePin(GPIOB, EN0_Pin, RESET);
 80002d0:	2200      	movs	r2, #0
 80002d2:	2180      	movs	r1, #128	@ 0x80
 80002d4:	486f      	ldr	r0, [pc, #444]	@ (8000494 <display7SEG+0x348>)
 80002d6:	f001 feca 	bl	800206e <HAL_GPIO_WritePin>
   	    	        HAL_GPIO_WritePin(GPIOB, EN1_Pin | EN2_Pin | EN3_Pin, SET);
 80002da:	2201      	movs	r2, #1
 80002dc:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80002e0:	486c      	ldr	r0, [pc, #432]	@ (8000494 <display7SEG+0x348>)
 80002e2:	f001 fec4 	bl	800206e <HAL_GPIO_WritePin>
   	    	        HAL_GPIO_WritePin(GPIOB, SEG_1_Pin , SET);
 80002e6:	2201      	movs	r2, #1
 80002e8:	2102      	movs	r1, #2
 80002ea:	486a      	ldr	r0, [pc, #424]	@ (8000494 <display7SEG+0x348>)
 80002ec:	f001 febf 	bl	800206e <HAL_GPIO_WritePin>
   	    	        HAL_GPIO_WritePin(GPIOB, SEG_0_Pin |SEG_2_Pin | SEG_3_Pin | SEG_4_Pin | SEG_5_Pin | SEG_6_Pin, RESET);
 80002f0:	2200      	movs	r2, #0
 80002f2:	217d      	movs	r1, #125	@ 0x7d
 80002f4:	4867      	ldr	r0, [pc, #412]	@ (8000494 <display7SEG+0x348>)
 80002f6:	f001 feba 	bl	800206e <HAL_GPIO_WritePin>
   	    	        break;
 80002fa:	e03d      	b.n	8000378 <display7SEG+0x22c>
   	    	    case 7:
   	    	    	HAL_GPIO_WritePin(GPIOB, EN0_Pin, RESET);
 80002fc:	2200      	movs	r2, #0
 80002fe:	2180      	movs	r1, #128	@ 0x80
 8000300:	4864      	ldr	r0, [pc, #400]	@ (8000494 <display7SEG+0x348>)
 8000302:	f001 feb4 	bl	800206e <HAL_GPIO_WritePin>
   	    	    	HAL_GPIO_WritePin(GPIOB, EN1_Pin | EN2_Pin | EN3_Pin, SET);
 8000306:	2201      	movs	r2, #1
 8000308:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800030c:	4861      	ldr	r0, [pc, #388]	@ (8000494 <display7SEG+0x348>)
 800030e:	f001 feae 	bl	800206e <HAL_GPIO_WritePin>
   	    	    	HAL_GPIO_WritePin(GPIOB, SEG_3_Pin | SEG_4_Pin | SEG_5_Pin | SEG_6_Pin, SET);
 8000312:	2201      	movs	r2, #1
 8000314:	2178      	movs	r1, #120	@ 0x78
 8000316:	485f      	ldr	r0, [pc, #380]	@ (8000494 <display7SEG+0x348>)
 8000318:	f001 fea9 	bl	800206e <HAL_GPIO_WritePin>
   	    	        HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_1_Pin | SEG_2_Pin, RESET);
 800031c:	2200      	movs	r2, #0
 800031e:	2107      	movs	r1, #7
 8000320:	485c      	ldr	r0, [pc, #368]	@ (8000494 <display7SEG+0x348>)
 8000322:	f001 fea4 	bl	800206e <HAL_GPIO_WritePin>
   	    	        break;
 8000326:	e027      	b.n	8000378 <display7SEG+0x22c>
   	    	    case 8:
   	    	    	HAL_GPIO_WritePin(GPIOB, EN0_Pin, RESET);
 8000328:	2200      	movs	r2, #0
 800032a:	2180      	movs	r1, #128	@ 0x80
 800032c:	4859      	ldr	r0, [pc, #356]	@ (8000494 <display7SEG+0x348>)
 800032e:	f001 fe9e 	bl	800206e <HAL_GPIO_WritePin>
   	    	    	HAL_GPIO_WritePin(GPIOB, EN1_Pin | EN2_Pin | EN3_Pin, SET);
 8000332:	2201      	movs	r2, #1
 8000334:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8000338:	4856      	ldr	r0, [pc, #344]	@ (8000494 <display7SEG+0x348>)
 800033a:	f001 fe98 	bl	800206e <HAL_GPIO_WritePin>
   	    	        HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_1_Pin | SEG_2_Pin | SEG_3_Pin | SEG_4_Pin | SEG_5_Pin | SEG_6_Pin , RESET);
 800033e:	2200      	movs	r2, #0
 8000340:	217f      	movs	r1, #127	@ 0x7f
 8000342:	4854      	ldr	r0, [pc, #336]	@ (8000494 <display7SEG+0x348>)
 8000344:	f001 fe93 	bl	800206e <HAL_GPIO_WritePin>
   	    	        break;
 8000348:	e016      	b.n	8000378 <display7SEG+0x22c>
   	    	    case 9:
   	    	    	HAL_GPIO_WritePin(GPIOB, EN0_Pin, RESET);
 800034a:	2200      	movs	r2, #0
 800034c:	2180      	movs	r1, #128	@ 0x80
 800034e:	4851      	ldr	r0, [pc, #324]	@ (8000494 <display7SEG+0x348>)
 8000350:	f001 fe8d 	bl	800206e <HAL_GPIO_WritePin>
   	    	    	HAL_GPIO_WritePin(GPIOB, EN1_Pin | EN2_Pin | EN3_Pin, SET);
 8000354:	2201      	movs	r2, #1
 8000356:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800035a:	484e      	ldr	r0, [pc, #312]	@ (8000494 <display7SEG+0x348>)
 800035c:	f001 fe87 	bl	800206e <HAL_GPIO_WritePin>
   	    	    	HAL_GPIO_WritePin(GPIOB, SEG_4_Pin, SET);
 8000360:	2201      	movs	r2, #1
 8000362:	2110      	movs	r1, #16
 8000364:	484b      	ldr	r0, [pc, #300]	@ (8000494 <display7SEG+0x348>)
 8000366:	f001 fe82 	bl	800206e <HAL_GPIO_WritePin>
   	    	    	HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_1_Pin | SEG_2_Pin | SEG_3_Pin | SEG_5_Pin | SEG_6_Pin , RESET);
 800036a:	2200      	movs	r2, #0
 800036c:	216f      	movs	r1, #111	@ 0x6f
 800036e:	4849      	ldr	r0, [pc, #292]	@ (8000494 <display7SEG+0x348>)
 8000370:	f001 fe7d 	bl	800206e <HAL_GPIO_WritePin>
   	    	    	break;
 8000374:	e000      	b.n	8000378 <display7SEG+0x22c>
                   default:
                   	break;
 8000376:	bf00      	nop
   	    	}
   	    	index_led = 1;
 8000378:	4b44      	ldr	r3, [pc, #272]	@ (800048c <display7SEG+0x340>)
 800037a:	2201      	movs	r2, #1
 800037c:	601a      	str	r2, [r3, #0]
   	      }
   	      break;
 800037e:	e33c      	b.n	80009fa <display7SEG+0x8ae>
   	    case 1:
   	       if(index_led >= 0 && index_led <= 3)
 8000380:	4b42      	ldr	r3, [pc, #264]	@ (800048c <display7SEG+0x340>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	2b00      	cmp	r3, #0
 8000386:	f2c0 833a 	blt.w	80009fe <display7SEG+0x8b2>
 800038a:	4b40      	ldr	r3, [pc, #256]	@ (800048c <display7SEG+0x340>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	2b03      	cmp	r3, #3
 8000390:	f300 8335 	bgt.w	80009fe <display7SEG+0x8b2>
   	       {
   	    	  switch(led_buffer[index_led])
 8000394:	4b3d      	ldr	r3, [pc, #244]	@ (800048c <display7SEG+0x340>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a3d      	ldr	r2, [pc, #244]	@ (8000490 <display7SEG+0x344>)
 800039a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800039e:	2b09      	cmp	r3, #9
 80003a0:	f200 80ff 	bhi.w	80005a2 <display7SEG+0x456>
 80003a4:	a201      	add	r2, pc, #4	@ (adr r2, 80003ac <display7SEG+0x260>)
 80003a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003aa:	bf00      	nop
 80003ac:	080003d5 	.word	0x080003d5
 80003b0:	08000403 	.word	0x08000403
 80003b4:	08000431 	.word	0x08000431
 80003b8:	0800045f 	.word	0x0800045f
 80003bc:	08000499 	.word	0x08000499
 80003c0:	080004c7 	.word	0x080004c7
 80003c4:	080004f5 	.word	0x080004f5
 80003c8:	08000523 	.word	0x08000523
 80003cc:	08000551 	.word	0x08000551
 80003d0:	08000575 	.word	0x08000575
   	    	  {
   	    	    case 0:
   	    		    HAL_GPIO_WritePin(GPIOB, EN1_Pin, RESET);
 80003d4:	2200      	movs	r2, #0
 80003d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80003da:	482e      	ldr	r0, [pc, #184]	@ (8000494 <display7SEG+0x348>)
 80003dc:	f001 fe47 	bl	800206e <HAL_GPIO_WritePin>
   	    		    HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN2_Pin | EN3_Pin, SET);
 80003e0:	2201      	movs	r2, #1
 80003e2:	f44f 61d0 	mov.w	r1, #1664	@ 0x680
 80003e6:	482b      	ldr	r0, [pc, #172]	@ (8000494 <display7SEG+0x348>)
 80003e8:	f001 fe41 	bl	800206e <HAL_GPIO_WritePin>
   	    		    HAL_GPIO_WritePin(GPIOB, SEG_6_Pin, SET);
 80003ec:	2201      	movs	r2, #1
 80003ee:	2140      	movs	r1, #64	@ 0x40
 80003f0:	4828      	ldr	r0, [pc, #160]	@ (8000494 <display7SEG+0x348>)
 80003f2:	f001 fe3c 	bl	800206e <HAL_GPIO_WritePin>
   	    		    HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_1_Pin | SEG_2_Pin | SEG_3_Pin | SEG_4_Pin | SEG_5_Pin , RESET);
 80003f6:	2200      	movs	r2, #0
 80003f8:	213f      	movs	r1, #63	@ 0x3f
 80003fa:	4826      	ldr	r0, [pc, #152]	@ (8000494 <display7SEG+0x348>)
 80003fc:	f001 fe37 	bl	800206e <HAL_GPIO_WritePin>
   	    		    break;
 8000400:	e0d0      	b.n	80005a4 <display7SEG+0x458>
   	    		case 1:
   	    			HAL_GPIO_WritePin(GPIOB, EN1_Pin, RESET);
 8000402:	2200      	movs	r2, #0
 8000404:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000408:	4822      	ldr	r0, [pc, #136]	@ (8000494 <display7SEG+0x348>)
 800040a:	f001 fe30 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN2_Pin | EN3_Pin, SET);
 800040e:	2201      	movs	r2, #1
 8000410:	f44f 61d0 	mov.w	r1, #1664	@ 0x680
 8000414:	481f      	ldr	r0, [pc, #124]	@ (8000494 <display7SEG+0x348>)
 8000416:	f001 fe2a 	bl	800206e <HAL_GPIO_WritePin>
   	    		    HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_3_Pin | SEG_4_Pin | SEG_5_Pin | SEG_6_Pin, SET);
 800041a:	2201      	movs	r2, #1
 800041c:	2179      	movs	r1, #121	@ 0x79
 800041e:	481d      	ldr	r0, [pc, #116]	@ (8000494 <display7SEG+0x348>)
 8000420:	f001 fe25 	bl	800206e <HAL_GPIO_WritePin>
   	    		    HAL_GPIO_WritePin(GPIOB, SEG_1_Pin | SEG_2_Pin, RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	2106      	movs	r1, #6
 8000428:	481a      	ldr	r0, [pc, #104]	@ (8000494 <display7SEG+0x348>)
 800042a:	f001 fe20 	bl	800206e <HAL_GPIO_WritePin>
   	    		    break;
 800042e:	e0b9      	b.n	80005a4 <display7SEG+0x458>
   	    		case 2:
   					HAL_GPIO_WritePin(GPIOB, EN1_Pin, RESET);
 8000430:	2200      	movs	r2, #0
 8000432:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000436:	4817      	ldr	r0, [pc, #92]	@ (8000494 <display7SEG+0x348>)
 8000438:	f001 fe19 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN2_Pin | EN3_Pin, SET);
 800043c:	2201      	movs	r2, #1
 800043e:	f44f 61d0 	mov.w	r1, #1664	@ 0x680
 8000442:	4814      	ldr	r0, [pc, #80]	@ (8000494 <display7SEG+0x348>)
 8000444:	f001 fe13 	bl	800206e <HAL_GPIO_WritePin>
   	    		    HAL_GPIO_WritePin(GPIOB, SEG_2_Pin | SEG_5_Pin , SET);
 8000448:	2201      	movs	r2, #1
 800044a:	2124      	movs	r1, #36	@ 0x24
 800044c:	4811      	ldr	r0, [pc, #68]	@ (8000494 <display7SEG+0x348>)
 800044e:	f001 fe0e 	bl	800206e <HAL_GPIO_WritePin>
   	    		    HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_1_Pin |SEG_3_Pin | SEG_4_Pin | SEG_6_Pin, RESET);
 8000452:	2200      	movs	r2, #0
 8000454:	215b      	movs	r1, #91	@ 0x5b
 8000456:	480f      	ldr	r0, [pc, #60]	@ (8000494 <display7SEG+0x348>)
 8000458:	f001 fe09 	bl	800206e <HAL_GPIO_WritePin>
   	    		    break;
 800045c:	e0a2      	b.n	80005a4 <display7SEG+0x458>
   	    		case 3:
   	    			HAL_GPIO_WritePin(GPIOB, EN1_Pin, RESET);
 800045e:	2200      	movs	r2, #0
 8000460:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000464:	480b      	ldr	r0, [pc, #44]	@ (8000494 <display7SEG+0x348>)
 8000466:	f001 fe02 	bl	800206e <HAL_GPIO_WritePin>
   				    HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN2_Pin | EN3_Pin, SET);
 800046a:	2201      	movs	r2, #1
 800046c:	f44f 61d0 	mov.w	r1, #1664	@ 0x680
 8000470:	4808      	ldr	r0, [pc, #32]	@ (8000494 <display7SEG+0x348>)
 8000472:	f001 fdfc 	bl	800206e <HAL_GPIO_WritePin>
   	    		    HAL_GPIO_WritePin(GPIOB, SEG_4_Pin | SEG_5_Pin , SET);
 8000476:	2201      	movs	r2, #1
 8000478:	2130      	movs	r1, #48	@ 0x30
 800047a:	4806      	ldr	r0, [pc, #24]	@ (8000494 <display7SEG+0x348>)
 800047c:	f001 fdf7 	bl	800206e <HAL_GPIO_WritePin>
   	    		    HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_1_Pin |SEG_2_Pin | SEG_3_Pin | SEG_6_Pin, RESET);
 8000480:	2200      	movs	r2, #0
 8000482:	214f      	movs	r1, #79	@ 0x4f
 8000484:	4803      	ldr	r0, [pc, #12]	@ (8000494 <display7SEG+0x348>)
 8000486:	f001 fdf2 	bl	800206e <HAL_GPIO_WritePin>
   	    		    break;
 800048a:	e08b      	b.n	80005a4 <display7SEG+0x458>
 800048c:	200000e4 	.word	0x200000e4
 8000490:	200000d4 	.word	0x200000d4
 8000494:	40010c00 	.word	0x40010c00
   	    		case 4:
   	    			HAL_GPIO_WritePin(GPIOB, EN1_Pin, RESET);
 8000498:	2200      	movs	r2, #0
 800049a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800049e:	48cb      	ldr	r0, [pc, #812]	@ (80007cc <display7SEG+0x680>)
 80004a0:	f001 fde5 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN2_Pin | EN3_Pin, SET);
 80004a4:	2201      	movs	r2, #1
 80004a6:	f44f 61d0 	mov.w	r1, #1664	@ 0x680
 80004aa:	48c8      	ldr	r0, [pc, #800]	@ (80007cc <display7SEG+0x680>)
 80004ac:	f001 fddf 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_3_Pin | SEG_4_Pin , SET);
 80004b0:	2201      	movs	r2, #1
 80004b2:	2119      	movs	r1, #25
 80004b4:	48c5      	ldr	r0, [pc, #788]	@ (80007cc <display7SEG+0x680>)
 80004b6:	f001 fdda 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_1_Pin |SEG_2_Pin | SEG_5_Pin | SEG_6_Pin, RESET);
 80004ba:	2200      	movs	r2, #0
 80004bc:	2166      	movs	r1, #102	@ 0x66
 80004be:	48c3      	ldr	r0, [pc, #780]	@ (80007cc <display7SEG+0x680>)
 80004c0:	f001 fdd5 	bl	800206e <HAL_GPIO_WritePin>
   	    		    break;
 80004c4:	e06e      	b.n	80005a4 <display7SEG+0x458>
   	    		case 5:
   	    			HAL_GPIO_WritePin(GPIOB, EN1_Pin, RESET);
 80004c6:	2200      	movs	r2, #0
 80004c8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004cc:	48bf      	ldr	r0, [pc, #764]	@ (80007cc <display7SEG+0x680>)
 80004ce:	f001 fdce 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN2_Pin | EN3_Pin, SET);
 80004d2:	2201      	movs	r2, #1
 80004d4:	f44f 61d0 	mov.w	r1, #1664	@ 0x680
 80004d8:	48bc      	ldr	r0, [pc, #752]	@ (80007cc <display7SEG+0x680>)
 80004da:	f001 fdc8 	bl	800206e <HAL_GPIO_WritePin>
   	    		    HAL_GPIO_WritePin(GPIOB, SEG_1_Pin | SEG_4_Pin , SET);
 80004de:	2201      	movs	r2, #1
 80004e0:	2112      	movs	r1, #18
 80004e2:	48ba      	ldr	r0, [pc, #744]	@ (80007cc <display7SEG+0x680>)
 80004e4:	f001 fdc3 	bl	800206e <HAL_GPIO_WritePin>
   	    		    HAL_GPIO_WritePin(GPIOB, SEG_0_Pin |SEG_2_Pin | SEG_3_Pin | SEG_5_Pin | SEG_6_Pin, RESET);
 80004e8:	2200      	movs	r2, #0
 80004ea:	216d      	movs	r1, #109	@ 0x6d
 80004ec:	48b7      	ldr	r0, [pc, #732]	@ (80007cc <display7SEG+0x680>)
 80004ee:	f001 fdbe 	bl	800206e <HAL_GPIO_WritePin>
   	    		    break;
 80004f2:	e057      	b.n	80005a4 <display7SEG+0x458>
   				case 6:
   					HAL_GPIO_WritePin(GPIOB, EN1_Pin, RESET);
 80004f4:	2200      	movs	r2, #0
 80004f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004fa:	48b4      	ldr	r0, [pc, #720]	@ (80007cc <display7SEG+0x680>)
 80004fc:	f001 fdb7 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN2_Pin | EN3_Pin, SET);
 8000500:	2201      	movs	r2, #1
 8000502:	f44f 61d0 	mov.w	r1, #1664	@ 0x680
 8000506:	48b1      	ldr	r0, [pc, #708]	@ (80007cc <display7SEG+0x680>)
 8000508:	f001 fdb1 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_1_Pin , SET);
 800050c:	2201      	movs	r2, #1
 800050e:	2102      	movs	r1, #2
 8000510:	48ae      	ldr	r0, [pc, #696]	@ (80007cc <display7SEG+0x680>)
 8000512:	f001 fdac 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_0_Pin |SEG_2_Pin | SEG_3_Pin | SEG_4_Pin | SEG_5_Pin | SEG_6_Pin, RESET);
 8000516:	2200      	movs	r2, #0
 8000518:	217d      	movs	r1, #125	@ 0x7d
 800051a:	48ac      	ldr	r0, [pc, #688]	@ (80007cc <display7SEG+0x680>)
 800051c:	f001 fda7 	bl	800206e <HAL_GPIO_WritePin>
   	    		    break;
 8000520:	e040      	b.n	80005a4 <display7SEG+0x458>
   				case 7:
   					HAL_GPIO_WritePin(GPIOB, EN1_Pin, RESET);
 8000522:	2200      	movs	r2, #0
 8000524:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000528:	48a8      	ldr	r0, [pc, #672]	@ (80007cc <display7SEG+0x680>)
 800052a:	f001 fda0 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN2_Pin | EN3_Pin, SET);
 800052e:	2201      	movs	r2, #1
 8000530:	f44f 61d0 	mov.w	r1, #1664	@ 0x680
 8000534:	48a5      	ldr	r0, [pc, #660]	@ (80007cc <display7SEG+0x680>)
 8000536:	f001 fd9a 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_3_Pin | SEG_4_Pin | SEG_5_Pin | SEG_6_Pin, SET);
 800053a:	2201      	movs	r2, #1
 800053c:	2178      	movs	r1, #120	@ 0x78
 800053e:	48a3      	ldr	r0, [pc, #652]	@ (80007cc <display7SEG+0x680>)
 8000540:	f001 fd95 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_1_Pin | SEG_2_Pin, RESET);
 8000544:	2200      	movs	r2, #0
 8000546:	2107      	movs	r1, #7
 8000548:	48a0      	ldr	r0, [pc, #640]	@ (80007cc <display7SEG+0x680>)
 800054a:	f001 fd90 	bl	800206e <HAL_GPIO_WritePin>
   					break;
 800054e:	e029      	b.n	80005a4 <display7SEG+0x458>
   				case 8:
   					HAL_GPIO_WritePin(GPIOB, EN1_Pin, RESET);
 8000550:	2200      	movs	r2, #0
 8000552:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000556:	489d      	ldr	r0, [pc, #628]	@ (80007cc <display7SEG+0x680>)
 8000558:	f001 fd89 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN2_Pin | EN3_Pin, SET);
 800055c:	2201      	movs	r2, #1
 800055e:	f44f 61d0 	mov.w	r1, #1664	@ 0x680
 8000562:	489a      	ldr	r0, [pc, #616]	@ (80007cc <display7SEG+0x680>)
 8000564:	f001 fd83 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_1_Pin | SEG_2_Pin | SEG_3_Pin | SEG_4_Pin | SEG_5_Pin | SEG_6_Pin , RESET);
 8000568:	2200      	movs	r2, #0
 800056a:	217f      	movs	r1, #127	@ 0x7f
 800056c:	4897      	ldr	r0, [pc, #604]	@ (80007cc <display7SEG+0x680>)
 800056e:	f001 fd7e 	bl	800206e <HAL_GPIO_WritePin>
   					break;
 8000572:	e017      	b.n	80005a4 <display7SEG+0x458>
   				case 9:
   					HAL_GPIO_WritePin(GPIOB, EN1_Pin, RESET);
 8000574:	2200      	movs	r2, #0
 8000576:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800057a:	4894      	ldr	r0, [pc, #592]	@ (80007cc <display7SEG+0x680>)
 800057c:	f001 fd77 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN2_Pin | EN3_Pin, SET);
 8000580:	2201      	movs	r2, #1
 8000582:	f44f 61d0 	mov.w	r1, #1664	@ 0x680
 8000586:	4891      	ldr	r0, [pc, #580]	@ (80007cc <display7SEG+0x680>)
 8000588:	f001 fd71 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_4_Pin, SET);
 800058c:	2201      	movs	r2, #1
 800058e:	2110      	movs	r1, #16
 8000590:	488e      	ldr	r0, [pc, #568]	@ (80007cc <display7SEG+0x680>)
 8000592:	f001 fd6c 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_1_Pin | SEG_2_Pin | SEG_3_Pin | SEG_5_Pin | SEG_6_Pin , RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	216f      	movs	r1, #111	@ 0x6f
 800059a:	488c      	ldr	r0, [pc, #560]	@ (80007cc <display7SEG+0x680>)
 800059c:	f001 fd67 	bl	800206e <HAL_GPIO_WritePin>
   					break;
 80005a0:	e000      	b.n	80005a4 <display7SEG+0x458>
   				default:
   					break;
 80005a2:	bf00      	nop
   			}
   	    	  index_led = 2;
 80005a4:	4b8a      	ldr	r3, [pc, #552]	@ (80007d0 <display7SEG+0x684>)
 80005a6:	2202      	movs	r2, #2
 80005a8:	601a      	str	r2, [r3, #0]
   		  }
   	       break;
 80005aa:	e228      	b.n	80009fe <display7SEG+0x8b2>
   	    case 2:
   		   if(index_led >= 0 && index_led <= 3)
 80005ac:	4b88      	ldr	r3, [pc, #544]	@ (80007d0 <display7SEG+0x684>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	f2c0 8226 	blt.w	8000a02 <display7SEG+0x8b6>
 80005b6:	4b86      	ldr	r3, [pc, #536]	@ (80007d0 <display7SEG+0x684>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2b03      	cmp	r3, #3
 80005bc:	f300 8221 	bgt.w	8000a02 <display7SEG+0x8b6>
   		   {
   			  switch(led_buffer[index_led])
 80005c0:	4b83      	ldr	r3, [pc, #524]	@ (80007d0 <display7SEG+0x684>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a83      	ldr	r2, [pc, #524]	@ (80007d4 <display7SEG+0x688>)
 80005c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005ca:	2b09      	cmp	r3, #9
 80005cc:	f200 80f9 	bhi.w	80007c2 <display7SEG+0x676>
 80005d0:	a201      	add	r2, pc, #4	@ (adr r2, 80005d8 <display7SEG+0x48c>)
 80005d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005d6:	bf00      	nop
 80005d8:	08000601 	.word	0x08000601
 80005dc:	0800062f 	.word	0x0800062f
 80005e0:	0800065d 	.word	0x0800065d
 80005e4:	0800068b 	.word	0x0800068b
 80005e8:	080006b9 	.word	0x080006b9
 80005ec:	080006e7 	.word	0x080006e7
 80005f0:	08000715 	.word	0x08000715
 80005f4:	08000743 	.word	0x08000743
 80005f8:	08000771 	.word	0x08000771
 80005fc:	08000795 	.word	0x08000795
   			  {
   				case 0:
   					HAL_GPIO_WritePin(GPIOB, EN2_Pin, RESET);
 8000600:	2200      	movs	r2, #0
 8000602:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000606:	4871      	ldr	r0, [pc, #452]	@ (80007cc <display7SEG+0x680>)
 8000608:	f001 fd31 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN1_Pin | EN3_Pin, SET);
 800060c:	2201      	movs	r2, #1
 800060e:	f44f 61b0 	mov.w	r1, #1408	@ 0x580
 8000612:	486e      	ldr	r0, [pc, #440]	@ (80007cc <display7SEG+0x680>)
 8000614:	f001 fd2b 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_6_Pin, SET);
 8000618:	2201      	movs	r2, #1
 800061a:	2140      	movs	r1, #64	@ 0x40
 800061c:	486b      	ldr	r0, [pc, #428]	@ (80007cc <display7SEG+0x680>)
 800061e:	f001 fd26 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_1_Pin | SEG_2_Pin | SEG_3_Pin | SEG_4_Pin | SEG_5_Pin , RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	213f      	movs	r1, #63	@ 0x3f
 8000626:	4869      	ldr	r0, [pc, #420]	@ (80007cc <display7SEG+0x680>)
 8000628:	f001 fd21 	bl	800206e <HAL_GPIO_WritePin>
   					break;
 800062c:	e0ca      	b.n	80007c4 <display7SEG+0x678>
   				case 1:
   					HAL_GPIO_WritePin(GPIOB, EN2_Pin, RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000634:	4865      	ldr	r0, [pc, #404]	@ (80007cc <display7SEG+0x680>)
 8000636:	f001 fd1a 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN1_Pin | EN3_Pin, SET);
 800063a:	2201      	movs	r2, #1
 800063c:	f44f 61b0 	mov.w	r1, #1408	@ 0x580
 8000640:	4862      	ldr	r0, [pc, #392]	@ (80007cc <display7SEG+0x680>)
 8000642:	f001 fd14 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_3_Pin | SEG_4_Pin | SEG_5_Pin | SEG_6_Pin, SET);
 8000646:	2201      	movs	r2, #1
 8000648:	2179      	movs	r1, #121	@ 0x79
 800064a:	4860      	ldr	r0, [pc, #384]	@ (80007cc <display7SEG+0x680>)
 800064c:	f001 fd0f 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_1_Pin | SEG_2_Pin, RESET);
 8000650:	2200      	movs	r2, #0
 8000652:	2106      	movs	r1, #6
 8000654:	485d      	ldr	r0, [pc, #372]	@ (80007cc <display7SEG+0x680>)
 8000656:	f001 fd0a 	bl	800206e <HAL_GPIO_WritePin>
   					break;
 800065a:	e0b3      	b.n	80007c4 <display7SEG+0x678>
   				case 2:
   					HAL_GPIO_WritePin(GPIOB, EN2_Pin, RESET);
 800065c:	2200      	movs	r2, #0
 800065e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000662:	485a      	ldr	r0, [pc, #360]	@ (80007cc <display7SEG+0x680>)
 8000664:	f001 fd03 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN1_Pin | EN3_Pin, SET);
 8000668:	2201      	movs	r2, #1
 800066a:	f44f 61b0 	mov.w	r1, #1408	@ 0x580
 800066e:	4857      	ldr	r0, [pc, #348]	@ (80007cc <display7SEG+0x680>)
 8000670:	f001 fcfd 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_2_Pin | SEG_5_Pin , SET);
 8000674:	2201      	movs	r2, #1
 8000676:	2124      	movs	r1, #36	@ 0x24
 8000678:	4854      	ldr	r0, [pc, #336]	@ (80007cc <display7SEG+0x680>)
 800067a:	f001 fcf8 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_1_Pin |SEG_3_Pin | SEG_4_Pin | SEG_6_Pin, RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	215b      	movs	r1, #91	@ 0x5b
 8000682:	4852      	ldr	r0, [pc, #328]	@ (80007cc <display7SEG+0x680>)
 8000684:	f001 fcf3 	bl	800206e <HAL_GPIO_WritePin>
   					break;
 8000688:	e09c      	b.n	80007c4 <display7SEG+0x678>
   				case 3:
   					HAL_GPIO_WritePin(GPIOB, EN2_Pin, RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000690:	484e      	ldr	r0, [pc, #312]	@ (80007cc <display7SEG+0x680>)
 8000692:	f001 fcec 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN1_Pin | EN3_Pin, SET);
 8000696:	2201      	movs	r2, #1
 8000698:	f44f 61b0 	mov.w	r1, #1408	@ 0x580
 800069c:	484b      	ldr	r0, [pc, #300]	@ (80007cc <display7SEG+0x680>)
 800069e:	f001 fce6 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_4_Pin | SEG_5_Pin , SET);
 80006a2:	2201      	movs	r2, #1
 80006a4:	2130      	movs	r1, #48	@ 0x30
 80006a6:	4849      	ldr	r0, [pc, #292]	@ (80007cc <display7SEG+0x680>)
 80006a8:	f001 fce1 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_1_Pin |SEG_2_Pin | SEG_3_Pin | SEG_6_Pin, RESET);
 80006ac:	2200      	movs	r2, #0
 80006ae:	214f      	movs	r1, #79	@ 0x4f
 80006b0:	4846      	ldr	r0, [pc, #280]	@ (80007cc <display7SEG+0x680>)
 80006b2:	f001 fcdc 	bl	800206e <HAL_GPIO_WritePin>
   					break;
 80006b6:	e085      	b.n	80007c4 <display7SEG+0x678>
   				case 4:
   					HAL_GPIO_WritePin(GPIOB, EN2_Pin, RESET);
 80006b8:	2200      	movs	r2, #0
 80006ba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006be:	4843      	ldr	r0, [pc, #268]	@ (80007cc <display7SEG+0x680>)
 80006c0:	f001 fcd5 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN1_Pin | EN3_Pin, SET);
 80006c4:	2201      	movs	r2, #1
 80006c6:	f44f 61b0 	mov.w	r1, #1408	@ 0x580
 80006ca:	4840      	ldr	r0, [pc, #256]	@ (80007cc <display7SEG+0x680>)
 80006cc:	f001 fccf 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_3_Pin | SEG_4_Pin , SET);
 80006d0:	2201      	movs	r2, #1
 80006d2:	2119      	movs	r1, #25
 80006d4:	483d      	ldr	r0, [pc, #244]	@ (80007cc <display7SEG+0x680>)
 80006d6:	f001 fcca 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_1_Pin |SEG_2_Pin | SEG_5_Pin | SEG_6_Pin, RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	2166      	movs	r1, #102	@ 0x66
 80006de:	483b      	ldr	r0, [pc, #236]	@ (80007cc <display7SEG+0x680>)
 80006e0:	f001 fcc5 	bl	800206e <HAL_GPIO_WritePin>
   					break;
 80006e4:	e06e      	b.n	80007c4 <display7SEG+0x678>
   				case 5:
   					HAL_GPIO_WritePin(GPIOB, EN2_Pin, RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006ec:	4837      	ldr	r0, [pc, #220]	@ (80007cc <display7SEG+0x680>)
 80006ee:	f001 fcbe 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN1_Pin | EN3_Pin, SET);
 80006f2:	2201      	movs	r2, #1
 80006f4:	f44f 61b0 	mov.w	r1, #1408	@ 0x580
 80006f8:	4834      	ldr	r0, [pc, #208]	@ (80007cc <display7SEG+0x680>)
 80006fa:	f001 fcb8 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_1_Pin | SEG_4_Pin , SET);
 80006fe:	2201      	movs	r2, #1
 8000700:	2112      	movs	r1, #18
 8000702:	4832      	ldr	r0, [pc, #200]	@ (80007cc <display7SEG+0x680>)
 8000704:	f001 fcb3 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_0_Pin |SEG_2_Pin | SEG_3_Pin | SEG_5_Pin | SEG_6_Pin, RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	216d      	movs	r1, #109	@ 0x6d
 800070c:	482f      	ldr	r0, [pc, #188]	@ (80007cc <display7SEG+0x680>)
 800070e:	f001 fcae 	bl	800206e <HAL_GPIO_WritePin>
   					break;
 8000712:	e057      	b.n	80007c4 <display7SEG+0x678>
   				case 6:
   					HAL_GPIO_WritePin(GPIOB, EN2_Pin, RESET);
 8000714:	2200      	movs	r2, #0
 8000716:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800071a:	482c      	ldr	r0, [pc, #176]	@ (80007cc <display7SEG+0x680>)
 800071c:	f001 fca7 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN1_Pin | EN3_Pin, SET);
 8000720:	2201      	movs	r2, #1
 8000722:	f44f 61b0 	mov.w	r1, #1408	@ 0x580
 8000726:	4829      	ldr	r0, [pc, #164]	@ (80007cc <display7SEG+0x680>)
 8000728:	f001 fca1 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_1_Pin , SET);
 800072c:	2201      	movs	r2, #1
 800072e:	2102      	movs	r1, #2
 8000730:	4826      	ldr	r0, [pc, #152]	@ (80007cc <display7SEG+0x680>)
 8000732:	f001 fc9c 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_0_Pin |SEG_2_Pin | SEG_3_Pin | SEG_4_Pin | SEG_5_Pin | SEG_6_Pin, RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	217d      	movs	r1, #125	@ 0x7d
 800073a:	4824      	ldr	r0, [pc, #144]	@ (80007cc <display7SEG+0x680>)
 800073c:	f001 fc97 	bl	800206e <HAL_GPIO_WritePin>
   					break;
 8000740:	e040      	b.n	80007c4 <display7SEG+0x678>
   				case 7:
   					HAL_GPIO_WritePin(GPIOB, EN2_Pin, RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000748:	4820      	ldr	r0, [pc, #128]	@ (80007cc <display7SEG+0x680>)
 800074a:	f001 fc90 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN1_Pin | EN3_Pin, SET);
 800074e:	2201      	movs	r2, #1
 8000750:	f44f 61b0 	mov.w	r1, #1408	@ 0x580
 8000754:	481d      	ldr	r0, [pc, #116]	@ (80007cc <display7SEG+0x680>)
 8000756:	f001 fc8a 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_3_Pin | SEG_4_Pin | SEG_5_Pin | SEG_6_Pin, SET);
 800075a:	2201      	movs	r2, #1
 800075c:	2178      	movs	r1, #120	@ 0x78
 800075e:	481b      	ldr	r0, [pc, #108]	@ (80007cc <display7SEG+0x680>)
 8000760:	f001 fc85 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_1_Pin | SEG_2_Pin, RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	2107      	movs	r1, #7
 8000768:	4818      	ldr	r0, [pc, #96]	@ (80007cc <display7SEG+0x680>)
 800076a:	f001 fc80 	bl	800206e <HAL_GPIO_WritePin>
   					break;
 800076e:	e029      	b.n	80007c4 <display7SEG+0x678>
   				case 8:
   					HAL_GPIO_WritePin(GPIOB, EN2_Pin, RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000776:	4815      	ldr	r0, [pc, #84]	@ (80007cc <display7SEG+0x680>)
 8000778:	f001 fc79 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN1_Pin | EN3_Pin, SET);
 800077c:	2201      	movs	r2, #1
 800077e:	f44f 61b0 	mov.w	r1, #1408	@ 0x580
 8000782:	4812      	ldr	r0, [pc, #72]	@ (80007cc <display7SEG+0x680>)
 8000784:	f001 fc73 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_1_Pin | SEG_2_Pin | SEG_3_Pin | SEG_4_Pin | SEG_5_Pin | SEG_6_Pin , RESET);
 8000788:	2200      	movs	r2, #0
 800078a:	217f      	movs	r1, #127	@ 0x7f
 800078c:	480f      	ldr	r0, [pc, #60]	@ (80007cc <display7SEG+0x680>)
 800078e:	f001 fc6e 	bl	800206e <HAL_GPIO_WritePin>
   					break;
 8000792:	e017      	b.n	80007c4 <display7SEG+0x678>
   				case 9:
   					HAL_GPIO_WritePin(GPIOB, EN2_Pin, RESET);
 8000794:	2200      	movs	r2, #0
 8000796:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800079a:	480c      	ldr	r0, [pc, #48]	@ (80007cc <display7SEG+0x680>)
 800079c:	f001 fc67 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN1_Pin | EN3_Pin, SET);
 80007a0:	2201      	movs	r2, #1
 80007a2:	f44f 61b0 	mov.w	r1, #1408	@ 0x580
 80007a6:	4809      	ldr	r0, [pc, #36]	@ (80007cc <display7SEG+0x680>)
 80007a8:	f001 fc61 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_4_Pin, SET);
 80007ac:	2201      	movs	r2, #1
 80007ae:	2110      	movs	r1, #16
 80007b0:	4806      	ldr	r0, [pc, #24]	@ (80007cc <display7SEG+0x680>)
 80007b2:	f001 fc5c 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_1_Pin | SEG_2_Pin | SEG_3_Pin | SEG_5_Pin | SEG_6_Pin , RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	216f      	movs	r1, #111	@ 0x6f
 80007ba:	4804      	ldr	r0, [pc, #16]	@ (80007cc <display7SEG+0x680>)
 80007bc:	f001 fc57 	bl	800206e <HAL_GPIO_WritePin>
   					break;
 80007c0:	e000      	b.n	80007c4 <display7SEG+0x678>
   				default:
   					break;
 80007c2:	bf00      	nop
   			}
   			  index_led = 3;
 80007c4:	4b02      	ldr	r3, [pc, #8]	@ (80007d0 <display7SEG+0x684>)
 80007c6:	2203      	movs	r2, #3
 80007c8:	601a      	str	r2, [r3, #0]
   		  }
   		   break;
 80007ca:	e11a      	b.n	8000a02 <display7SEG+0x8b6>
 80007cc:	40010c00 	.word	0x40010c00
 80007d0:	200000e4 	.word	0x200000e4
 80007d4:	200000d4 	.word	0x200000d4
   	    case 3:
   	    	if(index_led >= 0 && index_led <= 3)
 80007d8:	4b8c      	ldr	r3, [pc, #560]	@ (8000a0c <display7SEG+0x8c0>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	f2c0 810a 	blt.w	80009f6 <display7SEG+0x8aa>
 80007e2:	4b8a      	ldr	r3, [pc, #552]	@ (8000a0c <display7SEG+0x8c0>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	2b03      	cmp	r3, #3
 80007e8:	f300 8105 	bgt.w	80009f6 <display7SEG+0x8aa>
   		   {
   			  switch(led_buffer[index_led])
 80007ec:	4b87      	ldr	r3, [pc, #540]	@ (8000a0c <display7SEG+0x8c0>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a87      	ldr	r2, [pc, #540]	@ (8000a10 <display7SEG+0x8c4>)
 80007f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007f6:	2b09      	cmp	r3, #9
 80007f8:	f200 80f9 	bhi.w	80009ee <display7SEG+0x8a2>
 80007fc:	a201      	add	r2, pc, #4	@ (adr r2, 8000804 <display7SEG+0x6b8>)
 80007fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000802:	bf00      	nop
 8000804:	0800082d 	.word	0x0800082d
 8000808:	0800085b 	.word	0x0800085b
 800080c:	08000889 	.word	0x08000889
 8000810:	080008b7 	.word	0x080008b7
 8000814:	080008e5 	.word	0x080008e5
 8000818:	08000913 	.word	0x08000913
 800081c:	08000941 	.word	0x08000941
 8000820:	0800096f 	.word	0x0800096f
 8000824:	0800099d 	.word	0x0800099d
 8000828:	080009c1 	.word	0x080009c1
   			  {
   				case 0:
   					HAL_GPIO_WritePin(GPIOB, EN3_Pin, RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000832:	4878      	ldr	r0, [pc, #480]	@ (8000a14 <display7SEG+0x8c8>)
 8000834:	f001 fc1b 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN1_Pin | EN2_Pin, SET);
 8000838:	2201      	movs	r2, #1
 800083a:	f44f 7160 	mov.w	r1, #896	@ 0x380
 800083e:	4875      	ldr	r0, [pc, #468]	@ (8000a14 <display7SEG+0x8c8>)
 8000840:	f001 fc15 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_6_Pin, SET);
 8000844:	2201      	movs	r2, #1
 8000846:	2140      	movs	r1, #64	@ 0x40
 8000848:	4872      	ldr	r0, [pc, #456]	@ (8000a14 <display7SEG+0x8c8>)
 800084a:	f001 fc10 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_1_Pin | SEG_2_Pin | SEG_3_Pin | SEG_4_Pin | SEG_5_Pin , RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	213f      	movs	r1, #63	@ 0x3f
 8000852:	4870      	ldr	r0, [pc, #448]	@ (8000a14 <display7SEG+0x8c8>)
 8000854:	f001 fc0b 	bl	800206e <HAL_GPIO_WritePin>
   					break;
 8000858:	e0ca      	b.n	80009f0 <display7SEG+0x8a4>
   				case 1:
   					HAL_GPIO_WritePin(GPIOB, EN3_Pin, RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000860:	486c      	ldr	r0, [pc, #432]	@ (8000a14 <display7SEG+0x8c8>)
 8000862:	f001 fc04 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN1_Pin | EN2_Pin, SET);
 8000866:	2201      	movs	r2, #1
 8000868:	f44f 7160 	mov.w	r1, #896	@ 0x380
 800086c:	4869      	ldr	r0, [pc, #420]	@ (8000a14 <display7SEG+0x8c8>)
 800086e:	f001 fbfe 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_3_Pin | SEG_4_Pin | SEG_5_Pin | SEG_6_Pin, SET);
 8000872:	2201      	movs	r2, #1
 8000874:	2179      	movs	r1, #121	@ 0x79
 8000876:	4867      	ldr	r0, [pc, #412]	@ (8000a14 <display7SEG+0x8c8>)
 8000878:	f001 fbf9 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_1_Pin | SEG_2_Pin, RESET);
 800087c:	2200      	movs	r2, #0
 800087e:	2106      	movs	r1, #6
 8000880:	4864      	ldr	r0, [pc, #400]	@ (8000a14 <display7SEG+0x8c8>)
 8000882:	f001 fbf4 	bl	800206e <HAL_GPIO_WritePin>
   					break;
 8000886:	e0b3      	b.n	80009f0 <display7SEG+0x8a4>
   				case 2:
   					HAL_GPIO_WritePin(GPIOB, EN3_Pin, RESET);
 8000888:	2200      	movs	r2, #0
 800088a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800088e:	4861      	ldr	r0, [pc, #388]	@ (8000a14 <display7SEG+0x8c8>)
 8000890:	f001 fbed 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN1_Pin | EN2_Pin, SET);
 8000894:	2201      	movs	r2, #1
 8000896:	f44f 7160 	mov.w	r1, #896	@ 0x380
 800089a:	485e      	ldr	r0, [pc, #376]	@ (8000a14 <display7SEG+0x8c8>)
 800089c:	f001 fbe7 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_2_Pin | SEG_5_Pin , SET);
 80008a0:	2201      	movs	r2, #1
 80008a2:	2124      	movs	r1, #36	@ 0x24
 80008a4:	485b      	ldr	r0, [pc, #364]	@ (8000a14 <display7SEG+0x8c8>)
 80008a6:	f001 fbe2 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_1_Pin |SEG_3_Pin | SEG_4_Pin | SEG_6_Pin, RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	215b      	movs	r1, #91	@ 0x5b
 80008ae:	4859      	ldr	r0, [pc, #356]	@ (8000a14 <display7SEG+0x8c8>)
 80008b0:	f001 fbdd 	bl	800206e <HAL_GPIO_WritePin>
   					break;
 80008b4:	e09c      	b.n	80009f0 <display7SEG+0x8a4>
   				case 3:
   					HAL_GPIO_WritePin(GPIOB, EN3_Pin, RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008bc:	4855      	ldr	r0, [pc, #340]	@ (8000a14 <display7SEG+0x8c8>)
 80008be:	f001 fbd6 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN1_Pin | EN2_Pin, SET);
 80008c2:	2201      	movs	r2, #1
 80008c4:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80008c8:	4852      	ldr	r0, [pc, #328]	@ (8000a14 <display7SEG+0x8c8>)
 80008ca:	f001 fbd0 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_4_Pin | SEG_5_Pin , SET);
 80008ce:	2201      	movs	r2, #1
 80008d0:	2130      	movs	r1, #48	@ 0x30
 80008d2:	4850      	ldr	r0, [pc, #320]	@ (8000a14 <display7SEG+0x8c8>)
 80008d4:	f001 fbcb 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_1_Pin |SEG_2_Pin | SEG_3_Pin | SEG_6_Pin, RESET);
 80008d8:	2200      	movs	r2, #0
 80008da:	214f      	movs	r1, #79	@ 0x4f
 80008dc:	484d      	ldr	r0, [pc, #308]	@ (8000a14 <display7SEG+0x8c8>)
 80008de:	f001 fbc6 	bl	800206e <HAL_GPIO_WritePin>
   					break;
 80008e2:	e085      	b.n	80009f0 <display7SEG+0x8a4>
   				case 4:
   					HAL_GPIO_WritePin(GPIOB, EN3_Pin, RESET);
 80008e4:	2200      	movs	r2, #0
 80008e6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008ea:	484a      	ldr	r0, [pc, #296]	@ (8000a14 <display7SEG+0x8c8>)
 80008ec:	f001 fbbf 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN1_Pin | EN2_Pin, SET);
 80008f0:	2201      	movs	r2, #1
 80008f2:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80008f6:	4847      	ldr	r0, [pc, #284]	@ (8000a14 <display7SEG+0x8c8>)
 80008f8:	f001 fbb9 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_3_Pin | SEG_4_Pin , SET);
 80008fc:	2201      	movs	r2, #1
 80008fe:	2119      	movs	r1, #25
 8000900:	4844      	ldr	r0, [pc, #272]	@ (8000a14 <display7SEG+0x8c8>)
 8000902:	f001 fbb4 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_1_Pin |SEG_2_Pin | SEG_5_Pin | SEG_6_Pin, RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	2166      	movs	r1, #102	@ 0x66
 800090a:	4842      	ldr	r0, [pc, #264]	@ (8000a14 <display7SEG+0x8c8>)
 800090c:	f001 fbaf 	bl	800206e <HAL_GPIO_WritePin>
   					break;
 8000910:	e06e      	b.n	80009f0 <display7SEG+0x8a4>
   				case 5:
   					HAL_GPIO_WritePin(GPIOB, EN3_Pin, RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000918:	483e      	ldr	r0, [pc, #248]	@ (8000a14 <display7SEG+0x8c8>)
 800091a:	f001 fba8 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN1_Pin | EN2_Pin, SET);
 800091e:	2201      	movs	r2, #1
 8000920:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8000924:	483b      	ldr	r0, [pc, #236]	@ (8000a14 <display7SEG+0x8c8>)
 8000926:	f001 fba2 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_1_Pin | SEG_4_Pin , SET);
 800092a:	2201      	movs	r2, #1
 800092c:	2112      	movs	r1, #18
 800092e:	4839      	ldr	r0, [pc, #228]	@ (8000a14 <display7SEG+0x8c8>)
 8000930:	f001 fb9d 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_0_Pin |SEG_2_Pin | SEG_3_Pin | SEG_5_Pin | SEG_6_Pin, RESET);
 8000934:	2200      	movs	r2, #0
 8000936:	216d      	movs	r1, #109	@ 0x6d
 8000938:	4836      	ldr	r0, [pc, #216]	@ (8000a14 <display7SEG+0x8c8>)
 800093a:	f001 fb98 	bl	800206e <HAL_GPIO_WritePin>
   					break;
 800093e:	e057      	b.n	80009f0 <display7SEG+0x8a4>
   				case 6:
   					HAL_GPIO_WritePin(GPIOB, EN3_Pin, RESET);
 8000940:	2200      	movs	r2, #0
 8000942:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000946:	4833      	ldr	r0, [pc, #204]	@ (8000a14 <display7SEG+0x8c8>)
 8000948:	f001 fb91 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN1_Pin | EN2_Pin, SET);
 800094c:	2201      	movs	r2, #1
 800094e:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8000952:	4830      	ldr	r0, [pc, #192]	@ (8000a14 <display7SEG+0x8c8>)
 8000954:	f001 fb8b 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_1_Pin , SET);
 8000958:	2201      	movs	r2, #1
 800095a:	2102      	movs	r1, #2
 800095c:	482d      	ldr	r0, [pc, #180]	@ (8000a14 <display7SEG+0x8c8>)
 800095e:	f001 fb86 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_0_Pin |SEG_2_Pin | SEG_3_Pin | SEG_4_Pin | SEG_5_Pin | SEG_6_Pin, RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	217d      	movs	r1, #125	@ 0x7d
 8000966:	482b      	ldr	r0, [pc, #172]	@ (8000a14 <display7SEG+0x8c8>)
 8000968:	f001 fb81 	bl	800206e <HAL_GPIO_WritePin>
   					break;
 800096c:	e040      	b.n	80009f0 <display7SEG+0x8a4>
   				case 7:
   					HAL_GPIO_WritePin(GPIOB, EN3_Pin, RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000974:	4827      	ldr	r0, [pc, #156]	@ (8000a14 <display7SEG+0x8c8>)
 8000976:	f001 fb7a 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN1_Pin | EN2_Pin, SET);
 800097a:	2201      	movs	r2, #1
 800097c:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8000980:	4824      	ldr	r0, [pc, #144]	@ (8000a14 <display7SEG+0x8c8>)
 8000982:	f001 fb74 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_3_Pin | SEG_4_Pin | SEG_5_Pin | SEG_6_Pin, SET);
 8000986:	2201      	movs	r2, #1
 8000988:	2178      	movs	r1, #120	@ 0x78
 800098a:	4822      	ldr	r0, [pc, #136]	@ (8000a14 <display7SEG+0x8c8>)
 800098c:	f001 fb6f 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_1_Pin | SEG_2_Pin, RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	2107      	movs	r1, #7
 8000994:	481f      	ldr	r0, [pc, #124]	@ (8000a14 <display7SEG+0x8c8>)
 8000996:	f001 fb6a 	bl	800206e <HAL_GPIO_WritePin>
   					break;
 800099a:	e029      	b.n	80009f0 <display7SEG+0x8a4>
   				case 8:
   					HAL_GPIO_WritePin(GPIOB, EN3_Pin, RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009a2:	481c      	ldr	r0, [pc, #112]	@ (8000a14 <display7SEG+0x8c8>)
 80009a4:	f001 fb63 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN1_Pin | EN2_Pin, SET);
 80009a8:	2201      	movs	r2, #1
 80009aa:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80009ae:	4819      	ldr	r0, [pc, #100]	@ (8000a14 <display7SEG+0x8c8>)
 80009b0:	f001 fb5d 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_1_Pin | SEG_2_Pin | SEG_3_Pin | SEG_4_Pin | SEG_5_Pin | SEG_6_Pin , RESET);
 80009b4:	2200      	movs	r2, #0
 80009b6:	217f      	movs	r1, #127	@ 0x7f
 80009b8:	4816      	ldr	r0, [pc, #88]	@ (8000a14 <display7SEG+0x8c8>)
 80009ba:	f001 fb58 	bl	800206e <HAL_GPIO_WritePin>
   					break;
 80009be:	e017      	b.n	80009f0 <display7SEG+0x8a4>
   				case 9:
   					HAL_GPIO_WritePin(GPIOB, EN3_Pin, RESET);
 80009c0:	2200      	movs	r2, #0
 80009c2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009c6:	4813      	ldr	r0, [pc, #76]	@ (8000a14 <display7SEG+0x8c8>)
 80009c8:	f001 fb51 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN1_Pin | EN2_Pin, SET);
 80009cc:	2201      	movs	r2, #1
 80009ce:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80009d2:	4810      	ldr	r0, [pc, #64]	@ (8000a14 <display7SEG+0x8c8>)
 80009d4:	f001 fb4b 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_4_Pin, SET);
 80009d8:	2201      	movs	r2, #1
 80009da:	2110      	movs	r1, #16
 80009dc:	480d      	ldr	r0, [pc, #52]	@ (8000a14 <display7SEG+0x8c8>)
 80009de:	f001 fb46 	bl	800206e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_1_Pin | SEG_2_Pin | SEG_3_Pin | SEG_5_Pin | SEG_6_Pin , RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	216f      	movs	r1, #111	@ 0x6f
 80009e6:	480b      	ldr	r0, [pc, #44]	@ (8000a14 <display7SEG+0x8c8>)
 80009e8:	f001 fb41 	bl	800206e <HAL_GPIO_WritePin>
   					break;
 80009ec:	e000      	b.n	80009f0 <display7SEG+0x8a4>
   				default:
   					break;
 80009ee:	bf00      	nop
   			}
   			  index_led = 0;
 80009f0:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <display7SEG+0x8c0>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
   		  }
   	    default:
   			break;
 80009f6:	bf00      	nop
 80009f8:	e004      	b.n	8000a04 <display7SEG+0x8b8>
   	      break;
 80009fa:	bf00      	nop
 80009fc:	e002      	b.n	8000a04 <display7SEG+0x8b8>
   	       break;
 80009fe:	bf00      	nop
 8000a00:	e000      	b.n	8000a04 <display7SEG+0x8b8>
   		   break;
 8000a02:	bf00      	nop
          }

}
 8000a04:	bf00      	nop
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	200000e4 	.word	0x200000e4
 8000a10:	200000d4 	.word	0x200000d4
 8000a14:	40010c00 	.word	0x40010c00

08000a18 <update_LED7_buffer_mode>:


void update_LED7_buffer_mode(int num)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	led_buffer[0] = num / 10;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4a0d      	ldr	r2, [pc, #52]	@ (8000a58 <update_LED7_buffer_mode+0x40>)
 8000a24:	fb82 1203 	smull	r1, r2, r2, r3
 8000a28:	1092      	asrs	r2, r2, #2
 8000a2a:	17db      	asrs	r3, r3, #31
 8000a2c:	1ad3      	subs	r3, r2, r3
 8000a2e:	4a0b      	ldr	r2, [pc, #44]	@ (8000a5c <update_LED7_buffer_mode+0x44>)
 8000a30:	6013      	str	r3, [r2, #0]
	led_buffer[1] = num % 10;
 8000a32:	6879      	ldr	r1, [r7, #4]
 8000a34:	4b08      	ldr	r3, [pc, #32]	@ (8000a58 <update_LED7_buffer_mode+0x40>)
 8000a36:	fb83 2301 	smull	r2, r3, r3, r1
 8000a3a:	109a      	asrs	r2, r3, #2
 8000a3c:	17cb      	asrs	r3, r1, #31
 8000a3e:	1ad2      	subs	r2, r2, r3
 8000a40:	4613      	mov	r3, r2
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	4413      	add	r3, r2
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	1aca      	subs	r2, r1, r3
 8000a4a:	4b04      	ldr	r3, [pc, #16]	@ (8000a5c <update_LED7_buffer_mode+0x44>)
 8000a4c:	605a      	str	r2, [r3, #4]
}
 8000a4e:	bf00      	nop
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr
 8000a58:	66666667 	.word	0x66666667
 8000a5c:	200000d4 	.word	0x200000d4

08000a60 <update_LED7_buffer_counter>:
void update_LED7_buffer_counter(int num)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
	led_buffer[2] = num / 10;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	4a0d      	ldr	r2, [pc, #52]	@ (8000aa0 <update_LED7_buffer_counter+0x40>)
 8000a6c:	fb82 1203 	smull	r1, r2, r2, r3
 8000a70:	1092      	asrs	r2, r2, #2
 8000a72:	17db      	asrs	r3, r3, #31
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	4a0b      	ldr	r2, [pc, #44]	@ (8000aa4 <update_LED7_buffer_counter+0x44>)
 8000a78:	6093      	str	r3, [r2, #8]
	led_buffer[3] = num % 10;
 8000a7a:	6879      	ldr	r1, [r7, #4]
 8000a7c:	4b08      	ldr	r3, [pc, #32]	@ (8000aa0 <update_LED7_buffer_counter+0x40>)
 8000a7e:	fb83 2301 	smull	r2, r3, r3, r1
 8000a82:	109a      	asrs	r2, r3, #2
 8000a84:	17cb      	asrs	r3, r1, #31
 8000a86:	1ad2      	subs	r2, r2, r3
 8000a88:	4613      	mov	r3, r2
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	4413      	add	r3, r2
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	1aca      	subs	r2, r1, r3
 8000a92:	4b04      	ldr	r3, [pc, #16]	@ (8000aa4 <update_LED7_buffer_counter+0x44>)
 8000a94:	60da      	str	r2, [r3, #12]
}
 8000a96:	bf00      	nop
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr
 8000aa0:	66666667 	.word	0x66666667
 8000aa4:	200000d4 	.word	0x200000d4

08000aa8 <update_7seg_led>:

void update_7seg_led()
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
	if (timerLED7_flag)
 8000aac:	4b12      	ldr	r3, [pc, #72]	@ (8000af8 <update_7seg_led+0x50>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d01e      	beq.n	8000af2 <update_7seg_led+0x4a>
	{

		HAL_GPIO_WritePin(GPIOB, EN0_Pin, SET);
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	2180      	movs	r1, #128	@ 0x80
 8000ab8:	4810      	ldr	r0, [pc, #64]	@ (8000afc <update_7seg_led+0x54>)
 8000aba:	f001 fad8 	bl	800206e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, EN1_Pin, SET);
 8000abe:	2201      	movs	r2, #1
 8000ac0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ac4:	480d      	ldr	r0, [pc, #52]	@ (8000afc <update_7seg_led+0x54>)
 8000ac6:	f001 fad2 	bl	800206e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, EN2_Pin, SET);
 8000aca:	2201      	movs	r2, #1
 8000acc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ad0:	480a      	ldr	r0, [pc, #40]	@ (8000afc <update_7seg_led+0x54>)
 8000ad2:	f001 facc 	bl	800206e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, EN3_Pin, SET);
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000adc:	4807      	ldr	r0, [pc, #28]	@ (8000afc <update_7seg_led+0x54>)
 8000ade:	f001 fac6 	bl	800206e <HAL_GPIO_WritePin>

		display7SEG(index_led);
 8000ae2:	4b07      	ldr	r3, [pc, #28]	@ (8000b00 <update_7seg_led+0x58>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f7ff fb30 	bl	800014c <display7SEG>
		setTimerLED7(FREQUENCY_OF_4_LED7 );
 8000aec:	2064      	movs	r0, #100	@ 0x64
 8000aee:	f000 ff11 	bl	8001914 <setTimerLED7>
	}

}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	2000005c 	.word	0x2000005c
 8000afc:	40010c00 	.word	0x40010c00
 8000b00:	200000e4 	.word	0x200000e4

08000b04 <blink_1s>:
 */

#include "blink.h"

void blink_1s()
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
	if(timer_pure_flag == 1)
 8000b08:	4b08      	ldr	r3, [pc, #32]	@ (8000b2c <blink_1s+0x28>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d10b      	bne.n	8000b28 <blink_1s+0x24>
	{
		setTimerpure(500);
 8000b10:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b14:	f000 fe96 	bl	8001844 <setTimerpure>
		timer_pure_flag = 0;
 8000b18:	4b04      	ldr	r3, [pc, #16]	@ (8000b2c <blink_1s+0x28>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOB,Led_Red_Blink_Pin);
 8000b1e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b22:	4803      	ldr	r0, [pc, #12]	@ (8000b30 <blink_1s+0x2c>)
 8000b24:	f001 fabb 	bl	800209e <HAL_GPIO_TogglePin>
	}
}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	2000004c 	.word	0x2000004c
 8000b30:	40010c00 	.word	0x40010c00

08000b34 <Reset_Display_new_stats>:
enum lightState lightStateHorizontal = Red;
enum lightState lightStateVertical = Green;


void Reset_Display_new_stats()
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0

	lightStateHorizontal = Red;
 8000b38:	4b13      	ldr	r3, [pc, #76]	@ (8000b88 <Reset_Display_new_stats+0x54>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	701a      	strb	r2, [r3, #0]
	Red_counter_horizontal = lightPeriod[Red];
 8000b3e:	4b13      	ldr	r3, [pc, #76]	@ (8000b8c <Reset_Display_new_stats+0x58>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a13      	ldr	r2, [pc, #76]	@ (8000b90 <Reset_Display_new_stats+0x5c>)
 8000b44:	6013      	str	r3, [r2, #0]
	Yellow_counter_horizontal = lightPeriod[Yellow];
 8000b46:	4b11      	ldr	r3, [pc, #68]	@ (8000b8c <Reset_Display_new_stats+0x58>)
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	4a12      	ldr	r2, [pc, #72]	@ (8000b94 <Reset_Display_new_stats+0x60>)
 8000b4c:	6013      	str	r3, [r2, #0]
	Green_counter_horizontal = lightPeriod[Green];
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b8c <Reset_Display_new_stats+0x58>)
 8000b50:	689b      	ldr	r3, [r3, #8]
 8000b52:	4a11      	ldr	r2, [pc, #68]	@ (8000b98 <Reset_Display_new_stats+0x64>)
 8000b54:	6013      	str	r3, [r2, #0]

	lightStateVertical = Green;
 8000b56:	4b11      	ldr	r3, [pc, #68]	@ (8000b9c <Reset_Display_new_stats+0x68>)
 8000b58:	2202      	movs	r2, #2
 8000b5a:	701a      	strb	r2, [r3, #0]
	Red_counter_vertical = lightPeriod[Red];
 8000b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b8c <Reset_Display_new_stats+0x58>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a0f      	ldr	r2, [pc, #60]	@ (8000ba0 <Reset_Display_new_stats+0x6c>)
 8000b62:	6013      	str	r3, [r2, #0]
	Yellow_counter_vertical = lightPeriod[Yellow];
 8000b64:	4b09      	ldr	r3, [pc, #36]	@ (8000b8c <Reset_Display_new_stats+0x58>)
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	4a0e      	ldr	r2, [pc, #56]	@ (8000ba4 <Reset_Display_new_stats+0x70>)
 8000b6a:	6013      	str	r3, [r2, #0]
	Green_counter_vertical = lightPeriod[Green];
 8000b6c:	4b07      	ldr	r3, [pc, #28]	@ (8000b8c <Reset_Display_new_stats+0x58>)
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba8 <Reset_Display_new_stats+0x74>)
 8000b72:	6013      	str	r3, [r2, #0]

	clear_all_light();
 8000b74:	f000 f91e 	bl	8000db4 <clear_all_light>


	timerTrafficHorizontal_flag = 1;
 8000b78:	4b0c      	ldr	r3, [pc, #48]	@ (8000bac <Reset_Display_new_stats+0x78>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	601a      	str	r2, [r3, #0]
	timerTrafficVertical_flag = 1;
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb0 <Reset_Display_new_stats+0x7c>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	601a      	str	r2, [r3, #0]

}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	200000e8 	.word	0x200000e8
 8000b8c:	20000010 	.word	0x20000010
 8000b90:	2000001c 	.word	0x2000001c
 8000b94:	20000020 	.word	0x20000020
 8000b98:	20000024 	.word	0x20000024
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	20000028 	.word	0x20000028
 8000ba4:	2000002c 	.word	0x2000002c
 8000ba8:	20000030 	.word	0x20000030
 8000bac:	20000050 	.word	0x20000050
 8000bb0:	20000054 	.word	0x20000054

08000bb4 <displayTrafficLight>:

void displayTrafficLight()
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
	switch (lightStateHorizontal)
 8000bb8:	4b73      	ldr	r3, [pc, #460]	@ (8000d88 <displayTrafficLight+0x1d4>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b02      	cmp	r3, #2
 8000bbe:	d027      	beq.n	8000c10 <displayTrafficLight+0x5c>
 8000bc0:	2b02      	cmp	r3, #2
 8000bc2:	dc6c      	bgt.n	8000c9e <displayTrafficLight+0xea>
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d002      	beq.n	8000bce <displayTrafficLight+0x1a>
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d042      	beq.n	8000c52 <displayTrafficLight+0x9e>
 8000bcc:	e067      	b.n	8000c9e <displayTrafficLight+0xea>
	{
	case Red:
		if (timerTrafficHorizontal_flag)
 8000bce:	4b6f      	ldr	r3, [pc, #444]	@ (8000d8c <displayTrafficLight+0x1d8>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d05e      	beq.n	8000c94 <displayTrafficLight+0xe0>
		{
			setRedH();
 8000bd6:	f000 fce9 	bl	80015ac <setRedH>

			update_LED7_buffer_counter(Red_counter_horizontal);
 8000bda:	4b6d      	ldr	r3, [pc, #436]	@ (8000d90 <displayTrafficLight+0x1dc>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff ff3e 	bl	8000a60 <update_LED7_buffer_counter>
			Red_counter_horizontal--;
 8000be4:	4b6a      	ldr	r3, [pc, #424]	@ (8000d90 <displayTrafficLight+0x1dc>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	3b01      	subs	r3, #1
 8000bea:	4a69      	ldr	r2, [pc, #420]	@ (8000d90 <displayTrafficLight+0x1dc>)
 8000bec:	6013      	str	r3, [r2, #0]

			if (Red_counter_horizontal < 0)
 8000bee:	4b68      	ldr	r3, [pc, #416]	@ (8000d90 <displayTrafficLight+0x1dc>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	da07      	bge.n	8000c06 <displayTrafficLight+0x52>
			{
				lightStateHorizontal = Green;
 8000bf6:	4b64      	ldr	r3, [pc, #400]	@ (8000d88 <displayTrafficLight+0x1d4>)
 8000bf8:	2202      	movs	r2, #2
 8000bfa:	701a      	strb	r2, [r3, #0]
				Red_counter_horizontal = lightPeriod[Red];
 8000bfc:	4b65      	ldr	r3, [pc, #404]	@ (8000d94 <displayTrafficLight+0x1e0>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a63      	ldr	r2, [pc, #396]	@ (8000d90 <displayTrafficLight+0x1dc>)
 8000c02:	6013      	str	r3, [r2, #0]
			{
				setTimerTrafficHorizontal(LIGHT_DURATION);
			}
		}

		break;
 8000c04:	e046      	b.n	8000c94 <displayTrafficLight+0xe0>
				setTimerTrafficHorizontal(LIGHT_DURATION);
 8000c06:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c0a:	f000 fe35 	bl	8001878 <setTimerTrafficHorizontal>
		break;
 8000c0e:	e041      	b.n	8000c94 <displayTrafficLight+0xe0>

	case Green:
		if (timerTrafficHorizontal_flag)
 8000c10:	4b5e      	ldr	r3, [pc, #376]	@ (8000d8c <displayTrafficLight+0x1d8>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d03f      	beq.n	8000c98 <displayTrafficLight+0xe4>
		{
			setGreenH();
 8000c18:	f000 fcf4 	bl	8001604 <setGreenH>

			update_LED7_buffer_counter(Green_counter_horizontal);
 8000c1c:	4b5e      	ldr	r3, [pc, #376]	@ (8000d98 <displayTrafficLight+0x1e4>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff ff1d 	bl	8000a60 <update_LED7_buffer_counter>
			Green_counter_horizontal--;
 8000c26:	4b5c      	ldr	r3, [pc, #368]	@ (8000d98 <displayTrafficLight+0x1e4>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	4a5a      	ldr	r2, [pc, #360]	@ (8000d98 <displayTrafficLight+0x1e4>)
 8000c2e:	6013      	str	r3, [r2, #0]

			if (Green_counter_horizontal < 0)
 8000c30:	4b59      	ldr	r3, [pc, #356]	@ (8000d98 <displayTrafficLight+0x1e4>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	da07      	bge.n	8000c48 <displayTrafficLight+0x94>
			{
				lightStateHorizontal = Yellow;
 8000c38:	4b53      	ldr	r3, [pc, #332]	@ (8000d88 <displayTrafficLight+0x1d4>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	701a      	strb	r2, [r3, #0]
				Green_counter_horizontal = lightPeriod[Green];
 8000c3e:	4b55      	ldr	r3, [pc, #340]	@ (8000d94 <displayTrafficLight+0x1e0>)
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	4a55      	ldr	r2, [pc, #340]	@ (8000d98 <displayTrafficLight+0x1e4>)
 8000c44:	6013      	str	r3, [r2, #0]
			{
				setTimerTrafficHorizontal(LIGHT_DURATION);
			}
		}

		break;
 8000c46:	e027      	b.n	8000c98 <displayTrafficLight+0xe4>
				setTimerTrafficHorizontal(LIGHT_DURATION);
 8000c48:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c4c:	f000 fe14 	bl	8001878 <setTimerTrafficHorizontal>
		break;
 8000c50:	e022      	b.n	8000c98 <displayTrafficLight+0xe4>

	case Yellow:
		if (timerTrafficHorizontal_flag)
 8000c52:	4b4e      	ldr	r3, [pc, #312]	@ (8000d8c <displayTrafficLight+0x1d8>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d020      	beq.n	8000c9c <displayTrafficLight+0xe8>
		{
			setYellowH();
 8000c5a:	f000 fcbd 	bl	80015d8 <setYellowH>

			update_LED7_buffer_counter(Yellow_counter_horizontal);
 8000c5e:	4b4f      	ldr	r3, [pc, #316]	@ (8000d9c <displayTrafficLight+0x1e8>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff fefc 	bl	8000a60 <update_LED7_buffer_counter>
			Yellow_counter_horizontal--;
 8000c68:	4b4c      	ldr	r3, [pc, #304]	@ (8000d9c <displayTrafficLight+0x1e8>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	3b01      	subs	r3, #1
 8000c6e:	4a4b      	ldr	r2, [pc, #300]	@ (8000d9c <displayTrafficLight+0x1e8>)
 8000c70:	6013      	str	r3, [r2, #0]

			if (Yellow_counter_horizontal < 0)
 8000c72:	4b4a      	ldr	r3, [pc, #296]	@ (8000d9c <displayTrafficLight+0x1e8>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	da07      	bge.n	8000c8a <displayTrafficLight+0xd6>
			{
				lightStateHorizontal = Red;
 8000c7a:	4b43      	ldr	r3, [pc, #268]	@ (8000d88 <displayTrafficLight+0x1d4>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	701a      	strb	r2, [r3, #0]
				Yellow_counter_horizontal = lightPeriod[Yellow];
 8000c80:	4b44      	ldr	r3, [pc, #272]	@ (8000d94 <displayTrafficLight+0x1e0>)
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	4a45      	ldr	r2, [pc, #276]	@ (8000d9c <displayTrafficLight+0x1e8>)
 8000c86:	6013      	str	r3, [r2, #0]
			else
			{
				setTimerTrafficHorizontal(LIGHT_DURATION);
			}
		}
		break;
 8000c88:	e008      	b.n	8000c9c <displayTrafficLight+0xe8>
				setTimerTrafficHorizontal(LIGHT_DURATION);
 8000c8a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c8e:	f000 fdf3 	bl	8001878 <setTimerTrafficHorizontal>
		break;
 8000c92:	e003      	b.n	8000c9c <displayTrafficLight+0xe8>
		break;
 8000c94:	bf00      	nop
 8000c96:	e002      	b.n	8000c9e <displayTrafficLight+0xea>
		break;
 8000c98:	bf00      	nop
 8000c9a:	e000      	b.n	8000c9e <displayTrafficLight+0xea>
		break;
 8000c9c:	bf00      	nop
	}

	switch (lightStateVertical)
 8000c9e:	4b40      	ldr	r3, [pc, #256]	@ (8000da0 <displayTrafficLight+0x1ec>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	d027      	beq.n	8000cf6 <displayTrafficLight+0x142>
 8000ca6:	2b02      	cmp	r3, #2
 8000ca8:	dc6c      	bgt.n	8000d84 <displayTrafficLight+0x1d0>
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d002      	beq.n	8000cb4 <displayTrafficLight+0x100>
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d042      	beq.n	8000d38 <displayTrafficLight+0x184>
				setTimerTrafficVertical(LIGHT_DURATION);
			}
		}
		break;
	}
}
 8000cb2:	e067      	b.n	8000d84 <displayTrafficLight+0x1d0>
		if (timerTrafficVertical_flag)
 8000cb4:	4b3b      	ldr	r3, [pc, #236]	@ (8000da4 <displayTrafficLight+0x1f0>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d05e      	beq.n	8000d7a <displayTrafficLight+0x1c6>
			setRedV();
 8000cbc:	f000 fcb8 	bl	8001630 <setRedV>
			update_LED7_buffer_mode(Red_counter_vertical);
 8000cc0:	4b39      	ldr	r3, [pc, #228]	@ (8000da8 <displayTrafficLight+0x1f4>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff fea7 	bl	8000a18 <update_LED7_buffer_mode>
			Red_counter_vertical--;
 8000cca:	4b37      	ldr	r3, [pc, #220]	@ (8000da8 <displayTrafficLight+0x1f4>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	4a35      	ldr	r2, [pc, #212]	@ (8000da8 <displayTrafficLight+0x1f4>)
 8000cd2:	6013      	str	r3, [r2, #0]
			if (Red_counter_vertical < 0)
 8000cd4:	4b34      	ldr	r3, [pc, #208]	@ (8000da8 <displayTrafficLight+0x1f4>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	da07      	bge.n	8000cec <displayTrafficLight+0x138>
				lightStateVertical = Green;
 8000cdc:	4b30      	ldr	r3, [pc, #192]	@ (8000da0 <displayTrafficLight+0x1ec>)
 8000cde:	2202      	movs	r2, #2
 8000ce0:	701a      	strb	r2, [r3, #0]
				Red_counter_vertical = lightPeriod[Red];
 8000ce2:	4b2c      	ldr	r3, [pc, #176]	@ (8000d94 <displayTrafficLight+0x1e0>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a30      	ldr	r2, [pc, #192]	@ (8000da8 <displayTrafficLight+0x1f4>)
 8000ce8:	6013      	str	r3, [r2, #0]
		break;
 8000cea:	e046      	b.n	8000d7a <displayTrafficLight+0x1c6>
				setTimerTrafficVertical(LIGHT_DURATION);
 8000cec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000cf0:	f000 fddc 	bl	80018ac <setTimerTrafficVertical>
		break;
 8000cf4:	e041      	b.n	8000d7a <displayTrafficLight+0x1c6>
		if (timerTrafficVertical_flag)
 8000cf6:	4b2b      	ldr	r3, [pc, #172]	@ (8000da4 <displayTrafficLight+0x1f0>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d03f      	beq.n	8000d7e <displayTrafficLight+0x1ca>
			setGreenV();
 8000cfe:	f000 fcc3 	bl	8001688 <setGreenV>
			update_LED7_buffer_mode(Green_counter_vertical);
 8000d02:	4b2a      	ldr	r3, [pc, #168]	@ (8000dac <displayTrafficLight+0x1f8>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff fe86 	bl	8000a18 <update_LED7_buffer_mode>
			Green_counter_vertical--;
 8000d0c:	4b27      	ldr	r3, [pc, #156]	@ (8000dac <displayTrafficLight+0x1f8>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	3b01      	subs	r3, #1
 8000d12:	4a26      	ldr	r2, [pc, #152]	@ (8000dac <displayTrafficLight+0x1f8>)
 8000d14:	6013      	str	r3, [r2, #0]
			if (Green_counter_vertical < 0)
 8000d16:	4b25      	ldr	r3, [pc, #148]	@ (8000dac <displayTrafficLight+0x1f8>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	da07      	bge.n	8000d2e <displayTrafficLight+0x17a>
				lightStateVertical = Yellow;
 8000d1e:	4b20      	ldr	r3, [pc, #128]	@ (8000da0 <displayTrafficLight+0x1ec>)
 8000d20:	2201      	movs	r2, #1
 8000d22:	701a      	strb	r2, [r3, #0]
				Green_counter_vertical = lightPeriod[Green];
 8000d24:	4b1b      	ldr	r3, [pc, #108]	@ (8000d94 <displayTrafficLight+0x1e0>)
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	4a20      	ldr	r2, [pc, #128]	@ (8000dac <displayTrafficLight+0x1f8>)
 8000d2a:	6013      	str	r3, [r2, #0]
		break;
 8000d2c:	e027      	b.n	8000d7e <displayTrafficLight+0x1ca>
				setTimerTrafficVertical(LIGHT_DURATION);
 8000d2e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d32:	f000 fdbb 	bl	80018ac <setTimerTrafficVertical>
		break;
 8000d36:	e022      	b.n	8000d7e <displayTrafficLight+0x1ca>
		if (timerTrafficVertical_flag)
 8000d38:	4b1a      	ldr	r3, [pc, #104]	@ (8000da4 <displayTrafficLight+0x1f0>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d020      	beq.n	8000d82 <displayTrafficLight+0x1ce>
			setYellowV();
 8000d40:	f000 fc8c 	bl	800165c <setYellowV>
			update_LED7_buffer_mode(Yellow_counter_vertical);
 8000d44:	4b1a      	ldr	r3, [pc, #104]	@ (8000db0 <displayTrafficLight+0x1fc>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff fe65 	bl	8000a18 <update_LED7_buffer_mode>
			Yellow_counter_vertical--;
 8000d4e:	4b18      	ldr	r3, [pc, #96]	@ (8000db0 <displayTrafficLight+0x1fc>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	4a16      	ldr	r2, [pc, #88]	@ (8000db0 <displayTrafficLight+0x1fc>)
 8000d56:	6013      	str	r3, [r2, #0]
			if (Yellow_counter_vertical < 0)
 8000d58:	4b15      	ldr	r3, [pc, #84]	@ (8000db0 <displayTrafficLight+0x1fc>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	da07      	bge.n	8000d70 <displayTrafficLight+0x1bc>
				lightStateVertical = Red;
 8000d60:	4b0f      	ldr	r3, [pc, #60]	@ (8000da0 <displayTrafficLight+0x1ec>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	701a      	strb	r2, [r3, #0]
				Yellow_counter_vertical = lightPeriod[Yellow];
 8000d66:	4b0b      	ldr	r3, [pc, #44]	@ (8000d94 <displayTrafficLight+0x1e0>)
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	4a11      	ldr	r2, [pc, #68]	@ (8000db0 <displayTrafficLight+0x1fc>)
 8000d6c:	6013      	str	r3, [r2, #0]
		break;
 8000d6e:	e008      	b.n	8000d82 <displayTrafficLight+0x1ce>
				setTimerTrafficVertical(LIGHT_DURATION);
 8000d70:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d74:	f000 fd9a 	bl	80018ac <setTimerTrafficVertical>
		break;
 8000d78:	e003      	b.n	8000d82 <displayTrafficLight+0x1ce>
		break;
 8000d7a:	bf00      	nop
 8000d7c:	e002      	b.n	8000d84 <displayTrafficLight+0x1d0>
		break;
 8000d7e:	bf00      	nop
 8000d80:	e000      	b.n	8000d84 <displayTrafficLight+0x1d0>
		break;
 8000d82:	bf00      	nop
}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	200000e8 	.word	0x200000e8
 8000d8c:	20000050 	.word	0x20000050
 8000d90:	2000001c 	.word	0x2000001c
 8000d94:	20000010 	.word	0x20000010
 8000d98:	20000024 	.word	0x20000024
 8000d9c:	20000020 	.word	0x20000020
 8000da0:	20000000 	.word	0x20000000
 8000da4:	20000054 	.word	0x20000054
 8000da8:	20000028 	.word	0x20000028
 8000dac:	20000030 	.word	0x20000030
 8000db0:	2000002c 	.word	0x2000002c

08000db4 <clear_all_light>:

enum Mode mode = DISPLAY;


void clear_all_light(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, Red_H_Pin, SET);
 8000db8:	2201      	movs	r2, #1
 8000dba:	2102      	movs	r1, #2
 8000dbc:	480e      	ldr	r0, [pc, #56]	@ (8000df8 <clear_all_light+0x44>)
 8000dbe:	f001 f956 	bl	800206e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, Yellow_H_Pin, SET);
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	2104      	movs	r1, #4
 8000dc6:	480c      	ldr	r0, [pc, #48]	@ (8000df8 <clear_all_light+0x44>)
 8000dc8:	f001 f951 	bl	800206e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, Green_H_Pin, SET);
 8000dcc:	2201      	movs	r2, #1
 8000dce:	2108      	movs	r1, #8
 8000dd0:	4809      	ldr	r0, [pc, #36]	@ (8000df8 <clear_all_light+0x44>)
 8000dd2:	f001 f94c 	bl	800206e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, Red_V_Pin, SET);
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	2110      	movs	r1, #16
 8000dda:	4807      	ldr	r0, [pc, #28]	@ (8000df8 <clear_all_light+0x44>)
 8000ddc:	f001 f947 	bl	800206e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, Green_V_Pin, SET);
 8000de0:	2201      	movs	r2, #1
 8000de2:	2140      	movs	r1, #64	@ 0x40
 8000de4:	4804      	ldr	r0, [pc, #16]	@ (8000df8 <clear_all_light+0x44>)
 8000de6:	f001 f942 	bl	800206e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, Yellow_V_Pin, SET);
 8000dea:	2201      	movs	r2, #1
 8000dec:	2120      	movs	r1, #32
 8000dee:	4802      	ldr	r0, [pc, #8]	@ (8000df8 <clear_all_light+0x44>)
 8000df0:	f001 f93d 	bl	800206e <HAL_GPIO_WritePin>
}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40010800 	.word	0x40010800

08000dfc <blinkingLight>:

void blinkingLight(uint8_t light)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	71fb      	strb	r3, [r7, #7]
	if (timerBlink_flag == 1)
 8000e06:	4b1d      	ldr	r3, [pc, #116]	@ (8000e7c <blinkingLight+0x80>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d131      	bne.n	8000e72 <blinkingLight+0x76>
	{
		switch (light)
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d013      	beq.n	8000e3c <blinkingLight+0x40>
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	dc2b      	bgt.n	8000e70 <blinkingLight+0x74>
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d002      	beq.n	8000e22 <blinkingLight+0x26>
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d01a      	beq.n	8000e56 <blinkingLight+0x5a>
			HAL_GPIO_TogglePin(GPIOA, Yellow_V_Pin);
			setTimerBlink(500);
			break;

		default:
			break;
 8000e20:	e026      	b.n	8000e70 <blinkingLight+0x74>
			HAL_GPIO_TogglePin(GPIOA, Red_H_Pin);
 8000e22:	2102      	movs	r1, #2
 8000e24:	4816      	ldr	r0, [pc, #88]	@ (8000e80 <blinkingLight+0x84>)
 8000e26:	f001 f93a 	bl	800209e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, Red_V_Pin);
 8000e2a:	2110      	movs	r1, #16
 8000e2c:	4814      	ldr	r0, [pc, #80]	@ (8000e80 <blinkingLight+0x84>)
 8000e2e:	f001 f936 	bl	800209e <HAL_GPIO_TogglePin>
			setTimerBlink(500);
 8000e32:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e36:	f000 fd53 	bl	80018e0 <setTimerBlink>
			break;
 8000e3a:	e01a      	b.n	8000e72 <blinkingLight+0x76>
			HAL_GPIO_TogglePin(GPIOA, Green_H_Pin);
 8000e3c:	2108      	movs	r1, #8
 8000e3e:	4810      	ldr	r0, [pc, #64]	@ (8000e80 <blinkingLight+0x84>)
 8000e40:	f001 f92d 	bl	800209e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, Green_V_Pin);
 8000e44:	2140      	movs	r1, #64	@ 0x40
 8000e46:	480e      	ldr	r0, [pc, #56]	@ (8000e80 <blinkingLight+0x84>)
 8000e48:	f001 f929 	bl	800209e <HAL_GPIO_TogglePin>
			setTimerBlink(500);
 8000e4c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e50:	f000 fd46 	bl	80018e0 <setTimerBlink>
			break;
 8000e54:	e00d      	b.n	8000e72 <blinkingLight+0x76>
			HAL_GPIO_TogglePin(GPIOA, Yellow_H_Pin);
 8000e56:	2104      	movs	r1, #4
 8000e58:	4809      	ldr	r0, [pc, #36]	@ (8000e80 <blinkingLight+0x84>)
 8000e5a:	f001 f920 	bl	800209e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, Yellow_V_Pin);
 8000e5e:	2120      	movs	r1, #32
 8000e60:	4807      	ldr	r0, [pc, #28]	@ (8000e80 <blinkingLight+0x84>)
 8000e62:	f001 f91c 	bl	800209e <HAL_GPIO_TogglePin>
			setTimerBlink(500);
 8000e66:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e6a:	f000 fd39 	bl	80018e0 <setTimerBlink>
			break;
 8000e6e:	e000      	b.n	8000e72 <blinkingLight+0x76>
			break;
 8000e70:	bf00      	nop
		}
	}
}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000058 	.word	0x20000058
 8000e80:	40010800 	.word	0x40010800

08000e84 <prepare_for_change_mode>:

void prepare_for_change_mode(int index)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
	clear_all_light();
 8000e8c:	f7ff ff92 	bl	8000db4 <clear_all_light>
	for (int i = 0; i < No_OF_BUTTON; i++)
 8000e90:	2300      	movs	r3, #0
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	e007      	b.n	8000ea6 <prepare_for_change_mode+0x22>
	{
		buttonIsPressedAndReleased[i] = 0;
 8000e96:	4a11      	ldr	r2, [pc, #68]	@ (8000edc <prepare_for_change_mode+0x58>)
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < No_OF_BUTTON; i++)
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	ddf4      	ble.n	8000e96 <prepare_for_change_mode+0x12>
	}
	light_period_modify_buffer[index] = lightPeriod[index];
 8000eac:	4a0c      	ldr	r2, [pc, #48]	@ (8000ee0 <prepare_for_change_mode+0x5c>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000eb4:	490b      	ldr	r1, [pc, #44]	@ (8000ee4 <prepare_for_change_mode+0x60>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	update_LED7_buffer_mode(index + 2); // display the mode
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3302      	adds	r3, #2
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fda9 	bl	8000a18 <update_LED7_buffer_mode>
	update_LED7_buffer_counter(light_period_modify_buffer[index]);
 8000ec6:	4a07      	ldr	r2, [pc, #28]	@ (8000ee4 <prepare_for_change_mode+0x60>)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fdc6 	bl	8000a60 <update_LED7_buffer_counter>
}
 8000ed4:	bf00      	nop
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	200000ec 	.word	0x200000ec
 8000ee0:	20000010 	.word	0x20000010
 8000ee4:	20000004 	.word	0x20000004

08000ee8 <fsm_change_mode>:


void fsm_change_mode(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
	update_7seg_led();
 8000eec:	f7ff fddc 	bl	8000aa8 <update_7seg_led>
	  blink_1s();
 8000ef0:	f7ff fe08 	bl	8000b04 <blink_1s>


	switch (mode)
 8000ef4:	4b2e      	ldr	r3, [pc, #184]	@ (8000fb0 <fsm_change_mode+0xc8>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b03      	cmp	r3, #3
 8000efa:	d856      	bhi.n	8000faa <fsm_change_mode+0xc2>
 8000efc:	a201      	add	r2, pc, #4	@ (adr r2, 8000f04 <fsm_change_mode+0x1c>)
 8000efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f02:	bf00      	nop
 8000f04:	08000f15 	.word	0x08000f15
 8000f08:	08000f35 	.word	0x08000f35
 8000f0c:	08000f5d 	.word	0x08000f5d
 8000f10:	08000f85 	.word	0x08000f85
	{
	case DISPLAY:
		if (is_button_pressed_and_released(0))
 8000f14:	2000      	movs	r0, #0
 8000f16:	f000 f8d9 	bl	80010cc <is_button_pressed_and_released>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d006      	beq.n	8000f2e <fsm_change_mode+0x46>
		{

			mode = Change_Red_counter;
 8000f20:	4b23      	ldr	r3, [pc, #140]	@ (8000fb0 <fsm_change_mode+0xc8>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	701a      	strb	r2, [r3, #0]
			prepare_for_change_mode(Red);
 8000f26:	2000      	movs	r0, #0
 8000f28:	f7ff ffac 	bl	8000e84 <prepare_for_change_mode>
		else
		{
			displayTrafficLight();

		}
		break;
 8000f2c:	e03d      	b.n	8000faa <fsm_change_mode+0xc2>
			displayTrafficLight();
 8000f2e:	f7ff fe41 	bl	8000bb4 <displayTrafficLight>
		break;
 8000f32:	e03a      	b.n	8000faa <fsm_change_mode+0xc2>

	case Change_Red_counter:
		if (is_button_pressed_and_released(0))
 8000f34:	2000      	movs	r0, #0
 8000f36:	f000 f8c9 	bl	80010cc <is_button_pressed_and_released>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d006      	beq.n	8000f4e <fsm_change_mode+0x66>
		{
			mode = Change_Yellow_counter;
 8000f40:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb0 <fsm_change_mode+0xc8>)
 8000f42:	2202      	movs	r2, #2
 8000f44:	701a      	strb	r2, [r3, #0]
			prepare_for_change_mode(Yellow);
 8000f46:	2001      	movs	r0, #1
 8000f48:	f7ff ff9c 	bl	8000e84 <prepare_for_change_mode>
		{
			blinkingLight(Red);
			change_set_counter(Red);
		}

		break;
 8000f4c:	e02d      	b.n	8000faa <fsm_change_mode+0xc2>
			blinkingLight(Red);
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f7ff ff54 	bl	8000dfc <blinkingLight>
			change_set_counter(Red);
 8000f54:	2000      	movs	r0, #0
 8000f56:	f000 f82d 	bl	8000fb4 <change_set_counter>
		break;
 8000f5a:	e026      	b.n	8000faa <fsm_change_mode+0xc2>

	case Change_Yellow_counter:
		if (is_button_pressed_and_released(0))
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	f000 f8b5 	bl	80010cc <is_button_pressed_and_released>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d006      	beq.n	8000f76 <fsm_change_mode+0x8e>
		{
			mode = Change_Green_counter;
 8000f68:	4b11      	ldr	r3, [pc, #68]	@ (8000fb0 <fsm_change_mode+0xc8>)
 8000f6a:	2203      	movs	r2, #3
 8000f6c:	701a      	strb	r2, [r3, #0]
			prepare_for_change_mode(Green);
 8000f6e:	2002      	movs	r0, #2
 8000f70:	f7ff ff88 	bl	8000e84 <prepare_for_change_mode>
		{
			blinkingLight(Yellow);
			change_set_counter(Yellow);
		}

		break;
 8000f74:	e019      	b.n	8000faa <fsm_change_mode+0xc2>
			blinkingLight(Yellow);
 8000f76:	2001      	movs	r0, #1
 8000f78:	f7ff ff40 	bl	8000dfc <blinkingLight>
			change_set_counter(Yellow);
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	f000 f819 	bl	8000fb4 <change_set_counter>
		break;
 8000f82:	e012      	b.n	8000faa <fsm_change_mode+0xc2>

	case Change_Green_counter:
		if (is_button_pressed_and_released(0))
 8000f84:	2000      	movs	r0, #0
 8000f86:	f000 f8a1 	bl	80010cc <is_button_pressed_and_released>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d005      	beq.n	8000f9c <fsm_change_mode+0xb4>
		{
			mode = DISPLAY;
 8000f90:	4b07      	ldr	r3, [pc, #28]	@ (8000fb0 <fsm_change_mode+0xc8>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	701a      	strb	r2, [r3, #0]
			Reset_Display_new_stats();
 8000f96:	f7ff fdcd 	bl	8000b34 <Reset_Display_new_stats>
		{
			blinkingLight(Green);
			change_set_counter(Green);
		}

		break;
 8000f9a:	e005      	b.n	8000fa8 <fsm_change_mode+0xc0>
			blinkingLight(Green);
 8000f9c:	2002      	movs	r0, #2
 8000f9e:	f7ff ff2d 	bl	8000dfc <blinkingLight>
			change_set_counter(Green);
 8000fa2:	2002      	movs	r0, #2
 8000fa4:	f000 f806 	bl	8000fb4 <change_set_counter>
		break;
 8000fa8:	bf00      	nop
	}
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	200000e9 	.word	0x200000e9

08000fb4 <change_set_counter>:
 *      Author: kanza
 */

#include "fsm_setting.h"

void change_set_counter(uint8_t light) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
	if (is_button_pressed_and_released(1))
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	f000 f884 	bl	80010cc <is_button_pressed_and_released>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d01a      	beq.n	8001000 <change_set_counter+0x4c>
	{

		if (light_period_modify_buffer[light] == 99)
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	4a15      	ldr	r2, [pc, #84]	@ (8001024 <change_set_counter+0x70>)
 8000fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd2:	2b63      	cmp	r3, #99	@ 0x63
 8000fd4:	d105      	bne.n	8000fe2 <change_set_counter+0x2e>
			light_period_modify_buffer[light] = 1;
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	4a12      	ldr	r2, [pc, #72]	@ (8001024 <change_set_counter+0x70>)
 8000fda:	2101      	movs	r1, #1
 8000fdc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000fe0:	e007      	b.n	8000ff2 <change_set_counter+0x3e>
		else
			light_period_modify_buffer[light]++;
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	4a0f      	ldr	r2, [pc, #60]	@ (8001024 <change_set_counter+0x70>)
 8000fe6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000fea:	3201      	adds	r2, #1
 8000fec:	490d      	ldr	r1, [pc, #52]	@ (8001024 <change_set_counter+0x70>)
 8000fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		update_LED7_buffer_counter(light_period_modify_buffer[light]);
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	4a0b      	ldr	r2, [pc, #44]	@ (8001024 <change_set_counter+0x70>)
 8000ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fd30 	bl	8000a60 <update_LED7_buffer_counter>
	}



	if (is_button_pressed_and_released(2))
 8001000:	2002      	movs	r0, #2
 8001002:	f000 f863 	bl	80010cc <is_button_pressed_and_released>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d007      	beq.n	800101c <change_set_counter+0x68>
	{
		lightPeriod[light] = light_period_modify_buffer[light];
 800100c:	79fa      	ldrb	r2, [r7, #7]
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	4904      	ldr	r1, [pc, #16]	@ (8001024 <change_set_counter+0x70>)
 8001012:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001016:	4904      	ldr	r1, [pc, #16]	@ (8001028 <change_set_counter+0x74>)
 8001018:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000004 	.word	0x20000004
 8001028:	20000010 	.word	0x20000010

0800102c <fsm_for_button_processing>:




void fsm_for_button_processing(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0

	for (int index = 0; index < No_OF_BUTTON; index++)
 8001032:	2300      	movs	r3, #0
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	e03a      	b.n	80010ae <fsm_for_button_processing+0x82>
	{
		switch (buttonState[index])
 8001038:	4a21      	ldr	r2, [pc, #132]	@ (80010c0 <fsm_for_button_processing+0x94>)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4413      	add	r3, r2
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d015      	beq.n	8001070 <fsm_for_button_processing+0x44>
 8001044:	2b01      	cmp	r3, #1
 8001046:	d12f      	bne.n	80010a8 <fsm_for_button_processing+0x7c>
		{
		case RELEASED:

			if (is_button_pressed(index))
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	b2db      	uxtb	r3, r3
 800104c:	4618      	mov	r0, r3
 800104e:	f000 f89d 	bl	800118c <is_button_pressed>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d024      	beq.n	80010a2 <fsm_for_button_processing+0x76>
			{
				HAL_GPIO_WritePin(GPIOB, Button_Pressed_Pin, RESET);
 8001058:	2200      	movs	r2, #0
 800105a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800105e:	4819      	ldr	r0, [pc, #100]	@ (80010c4 <fsm_for_button_processing+0x98>)
 8001060:	f001 f805 	bl	800206e <HAL_GPIO_WritePin>

				buttonState[index] = PRESSED;
 8001064:	4a16      	ldr	r2, [pc, #88]	@ (80010c0 <fsm_for_button_processing+0x94>)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	2200      	movs	r2, #0
 800106c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800106e:	e018      	b.n	80010a2 <fsm_for_button_processing+0x76>

		case PRESSED:

			if (!is_button_pressed(index))
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	b2db      	uxtb	r3, r3
 8001074:	4618      	mov	r0, r3
 8001076:	f000 f889 	bl	800118c <is_button_pressed>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d112      	bne.n	80010a6 <fsm_for_button_processing+0x7a>
			{
				HAL_GPIO_WritePin(GPIOB, Button_Pressed_Pin, SET);
 8001080:	2201      	movs	r2, #1
 8001082:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001086:	480f      	ldr	r0, [pc, #60]	@ (80010c4 <fsm_for_button_processing+0x98>)
 8001088:	f000 fff1 	bl	800206e <HAL_GPIO_WritePin>

				buttonState[index] = RELEASED;
 800108c:	4a0c      	ldr	r2, [pc, #48]	@ (80010c0 <fsm_for_button_processing+0x94>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4413      	add	r3, r2
 8001092:	2201      	movs	r2, #1
 8001094:	701a      	strb	r2, [r3, #0]
				buttonIsPressedAndReleased[index] = 1;
 8001096:	4a0c      	ldr	r2, [pc, #48]	@ (80010c8 <fsm_for_button_processing+0x9c>)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2101      	movs	r1, #1
 800109c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}
			break;
 80010a0:	e001      	b.n	80010a6 <fsm_for_button_processing+0x7a>
			break;
 80010a2:	bf00      	nop
 80010a4:	e000      	b.n	80010a8 <fsm_for_button_processing+0x7c>
			break;
 80010a6:	bf00      	nop
	for (int index = 0; index < No_OF_BUTTON; index++)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3301      	adds	r3, #1
 80010ac:	607b      	str	r3, [r7, #4]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	ddc1      	ble.n	8001038 <fsm_for_button_processing+0xc>
		}

	}

}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000034 	.word	0x20000034
 80010c4:	40010c00 	.word	0x40010c00
 80010c8:	200000ec 	.word	0x200000ec

080010cc <is_button_pressed_and_released>:

int is_button_pressed_and_released(int index)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]

	if (buttonIsPressedAndReleased[index])
 80010d4:	4a09      	ldr	r2, [pc, #36]	@ (80010fc <is_button_pressed_and_released+0x30>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d006      	beq.n	80010ee <is_button_pressed_and_released+0x22>
	{
		buttonIsPressedAndReleased[index] = 0;
 80010e0:	4a06      	ldr	r2, [pc, #24]	@ (80010fc <is_button_pressed_and_released+0x30>)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2100      	movs	r1, #0
 80010e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e000      	b.n	80010f0 <is_button_pressed_and_released+0x24>
	}
	else
		return 0;
 80010ee:	2300      	movs	r3, #0
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc80      	pop	{r7}
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	200000ec 	.word	0x200000ec

08001100 <getKeyInput>:

// we define two buffers for debouncing
static GPIO_PinState debounceButtonBuffer1[No_OF_BUTTON]= {1,1,1};
static GPIO_PinState debounceButtonBuffer2[No_OF_BUTTON]= {1,1,1};;

void getKeyInput(void) {
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
	for (int i = 0; i < No_OF_BUTTON; i++) {
 8001106:	2300      	movs	r3, #0
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	e02f      	b.n	800116c <getKeyInput+0x6c>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 800110c:	4a1b      	ldr	r2, [pc, #108]	@ (800117c <getKeyInput+0x7c>)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4413      	add	r3, r2
 8001112:	7819      	ldrb	r1, [r3, #0]
 8001114:	4a1a      	ldr	r2, [pc, #104]	@ (8001180 <getKeyInput+0x80>)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4413      	add	r3, r2
 800111a:	460a      	mov	r2, r1
 800111c:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8 << i);
 800111e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	b29b      	uxth	r3, r3
 800112a:	4619      	mov	r1, r3
 800112c:	4815      	ldr	r0, [pc, #84]	@ (8001184 <getKeyInput+0x84>)
 800112e:	f000 ff87 	bl	8002040 <HAL_GPIO_ReadPin>
 8001132:	4603      	mov	r3, r0
 8001134:	4619      	mov	r1, r3
 8001136:	4a11      	ldr	r2, [pc, #68]	@ (800117c <getKeyInput+0x7c>)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4413      	add	r3, r2
 800113c:	460a      	mov	r2, r1
 800113e:	701a      	strb	r2, [r3, #0]
		if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) {
 8001140:	4a0e      	ldr	r2, [pc, #56]	@ (800117c <getKeyInput+0x7c>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4413      	add	r3, r2
 8001146:	781a      	ldrb	r2, [r3, #0]
 8001148:	490d      	ldr	r1, [pc, #52]	@ (8001180 <getKeyInput+0x80>)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	440b      	add	r3, r1
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	429a      	cmp	r2, r3
 8001152:	d108      	bne.n	8001166 <getKeyInput+0x66>
			buttonBuffer[i] = debounceButtonBuffer1[i];
 8001154:	4a09      	ldr	r2, [pc, #36]	@ (800117c <getKeyInput+0x7c>)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4413      	add	r3, r2
 800115a:	7819      	ldrb	r1, [r3, #0]
 800115c:	4a0a      	ldr	r2, [pc, #40]	@ (8001188 <getKeyInput+0x88>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4413      	add	r3, r2
 8001162:	460a      	mov	r2, r1
 8001164:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < No_OF_BUTTON; i++) {
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	3301      	adds	r3, #1
 800116a:	607b      	str	r3, [r7, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b02      	cmp	r3, #2
 8001170:	ddcc      	ble.n	800110c <getKeyInput+0xc>
		}
	}
}
 8001172:	bf00      	nop
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	2000003c 	.word	0x2000003c
 8001180:	20000040 	.word	0x20000040
 8001184:	40010800 	.word	0x40010800
 8001188:	20000038 	.word	0x20000038

0800118c <is_button_pressed>:

//Checking a button is pressed or not
unsigned char is_button_pressed(uint8_t index) {
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	71fb      	strb	r3, [r7, #7]
	if (index >= No_OF_BUTTON)
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	2b02      	cmp	r3, #2
 800119a:	d901      	bls.n	80011a0 <is_button_pressed+0x14>
		return 0;
 800119c:	2300      	movs	r3, #0
 800119e:	e007      	b.n	80011b0 <is_button_pressed+0x24>
	return ( buttonBuffer [ index ] == BUTTON_IS_PRESSED );
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	4a06      	ldr	r2, [pc, #24]	@ (80011bc <is_button_pressed+0x30>)
 80011a4:	5cd3      	ldrb	r3, [r2, r3]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	bf0c      	ite	eq
 80011aa:	2301      	moveq	r3, #1
 80011ac:	2300      	movne	r3, #0
 80011ae:	b2db      	uxtb	r3, r3
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	20000038 	.word	0x20000038

080011c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011c4:	f000 fc50 	bl	8001a68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011c8:	f000 f836 	bl	8001238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011cc:	f000 f8bc 	bl	8001348 <MX_GPIO_Init>
  MX_TIM2_Init();
 80011d0:	f000 f86e 	bl	80012b0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80011d4:	4812      	ldr	r0, [pc, #72]	@ (8001220 <main+0x60>)
 80011d6:	f001 fba9 	bl	800292c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_GPIO_WritePin(GPIOB, Led_Red_Blink_Pin, SET);
 80011da:	2201      	movs	r2, #1
 80011dc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011e0:	4810      	ldr	r0, [pc, #64]	@ (8001224 <main+0x64>)
 80011e2:	f000 ff44 	bl	800206e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, Button_Pressed_Pin, SET);
 80011e6:	2201      	movs	r2, #1
 80011e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011ec:	480d      	ldr	r0, [pc, #52]	@ (8001224 <main+0x64>)
 80011ee:	f000 ff3e 	bl	800206e <HAL_GPIO_WritePin>
	SCH_Add_Task(timer_run, 1, 10);
 80011f2:	220a      	movs	r2, #10
 80011f4:	2101      	movs	r1, #1
 80011f6:	480c      	ldr	r0, [pc, #48]	@ (8001228 <main+0x68>)
 80011f8:	f000 f918 	bl	800142c <SCH_Add_Task>
	SCH_Add_Task(getKeyInput, 1, 10);
 80011fc:	220a      	movs	r2, #10
 80011fe:	2101      	movs	r1, #1
 8001200:	480a      	ldr	r0, [pc, #40]	@ (800122c <main+0x6c>)
 8001202:	f000 f913 	bl	800142c <SCH_Add_Task>


	SCH_Add_Task(fsm_for_button_processing, 1, 10);
 8001206:	220a      	movs	r2, #10
 8001208:	2101      	movs	r1, #1
 800120a:	4809      	ldr	r0, [pc, #36]	@ (8001230 <main+0x70>)
 800120c:	f000 f90e 	bl	800142c <SCH_Add_Task>


	SCH_Add_Task(fsm_change_mode, 1, 10);
 8001210:	220a      	movs	r2, #10
 8001212:	2101      	movs	r1, #1
 8001214:	4807      	ldr	r0, [pc, #28]	@ (8001234 <main+0x74>)
 8001216:	f000 f909 	bl	800142c <SCH_Add_Task>

  while (1)
  {
//	  fsm_for_button_processing();
    /* USER CODE END WHILE */
          SCH_Dispatch_Tasks();
 800121a:	f000 f943 	bl	80014a4 <SCH_Dispatch_Tasks>
 800121e:	e7fc      	b.n	800121a <main+0x5a>
 8001220:	200000f8 	.word	0x200000f8
 8001224:	40010c00 	.word	0x40010c00
 8001228:	08001949 	.word	0x08001949
 800122c:	08001101 	.word	0x08001101
 8001230:	0800102d 	.word	0x0800102d
 8001234:	08000ee9 	.word	0x08000ee9

08001238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b090      	sub	sp, #64	@ 0x40
 800123c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800123e:	f107 0318 	add.w	r3, r7, #24
 8001242:	2228      	movs	r2, #40	@ 0x28
 8001244:	2100      	movs	r1, #0
 8001246:	4618      	mov	r0, r3
 8001248:	f001 ffba 	bl	80031c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800124c:	1d3b      	adds	r3, r7, #4
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	60da      	str	r2, [r3, #12]
 8001258:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800125a:	2302      	movs	r3, #2
 800125c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800125e:	2301      	movs	r3, #1
 8001260:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001262:	2310      	movs	r3, #16
 8001264:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001266:	2300      	movs	r3, #0
 8001268:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800126a:	f107 0318 	add.w	r3, r7, #24
 800126e:	4618      	mov	r0, r3
 8001270:	f000 ff2e 	bl	80020d0 <HAL_RCC_OscConfig>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800127a:	f000 f8d1 	bl	8001420 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800127e:	230f      	movs	r3, #15
 8001280:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001282:	2300      	movs	r3, #0
 8001284:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800128a:	2300      	movs	r3, #0
 800128c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800128e:	2300      	movs	r3, #0
 8001290:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001292:	1d3b      	adds	r3, r7, #4
 8001294:	2100      	movs	r1, #0
 8001296:	4618      	mov	r0, r3
 8001298:	f001 f99c 	bl	80025d4 <HAL_RCC_ClockConfig>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80012a2:	f000 f8bd 	bl	8001420 <Error_Handler>
  }
}
 80012a6:	bf00      	nop
 80012a8:	3740      	adds	r7, #64	@ 0x40
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
	...

080012b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012b6:	f107 0308 	add.w	r3, r7, #8
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c4:	463b      	mov	r3, r7
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001344 <MX_TIM2_Init+0x94>)
 80012ce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80012d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001344 <MX_TIM2_Init+0x94>)
 80012d6:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80012da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012dc:	4b19      	ldr	r3, [pc, #100]	@ (8001344 <MX_TIM2_Init+0x94>)
 80012de:	2200      	movs	r2, #0
 80012e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80012e2:	4b18      	ldr	r3, [pc, #96]	@ (8001344 <MX_TIM2_Init+0x94>)
 80012e4:	2209      	movs	r2, #9
 80012e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e8:	4b16      	ldr	r3, [pc, #88]	@ (8001344 <MX_TIM2_Init+0x94>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ee:	4b15      	ldr	r3, [pc, #84]	@ (8001344 <MX_TIM2_Init+0x94>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012f4:	4813      	ldr	r0, [pc, #76]	@ (8001344 <MX_TIM2_Init+0x94>)
 80012f6:	f001 fac9 	bl	800288c <HAL_TIM_Base_Init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001300:	f000 f88e 	bl	8001420 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001304:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001308:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800130a:	f107 0308 	add.w	r3, r7, #8
 800130e:	4619      	mov	r1, r3
 8001310:	480c      	ldr	r0, [pc, #48]	@ (8001344 <MX_TIM2_Init+0x94>)
 8001312:	f001 fc47 	bl	8002ba4 <HAL_TIM_ConfigClockSource>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800131c:	f000 f880 	bl	8001420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001320:	2300      	movs	r3, #0
 8001322:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001324:	2300      	movs	r3, #0
 8001326:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001328:	463b      	mov	r3, r7
 800132a:	4619      	mov	r1, r3
 800132c:	4805      	ldr	r0, [pc, #20]	@ (8001344 <MX_TIM2_Init+0x94>)
 800132e:	f001 fe1f 	bl	8002f70 <HAL_TIMEx_MasterConfigSynchronization>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001338:	f000 f872 	bl	8001420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800133c:	bf00      	nop
 800133e:	3718      	adds	r7, #24
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	200000f8 	.word	0x200000f8

08001348 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134e:	f107 0308 	add.w	r3, r7, #8
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800135c:	4b28      	ldr	r3, [pc, #160]	@ (8001400 <MX_GPIO_Init+0xb8>)
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	4a27      	ldr	r2, [pc, #156]	@ (8001400 <MX_GPIO_Init+0xb8>)
 8001362:	f043 0304 	orr.w	r3, r3, #4
 8001366:	6193      	str	r3, [r2, #24]
 8001368:	4b25      	ldr	r3, [pc, #148]	@ (8001400 <MX_GPIO_Init+0xb8>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	f003 0304 	and.w	r3, r3, #4
 8001370:	607b      	str	r3, [r7, #4]
 8001372:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001374:	4b22      	ldr	r3, [pc, #136]	@ (8001400 <MX_GPIO_Init+0xb8>)
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	4a21      	ldr	r2, [pc, #132]	@ (8001400 <MX_GPIO_Init+0xb8>)
 800137a:	f043 0308 	orr.w	r3, r3, #8
 800137e:	6193      	str	r3, [r2, #24]
 8001380:	4b1f      	ldr	r3, [pc, #124]	@ (8001400 <MX_GPIO_Init+0xb8>)
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	f003 0308 	and.w	r3, r3, #8
 8001388:	603b      	str	r3, [r7, #0]
 800138a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Red_H_Pin|Yellow_H_Pin|Green_H_Pin|Red_V_Pin
 800138c:	2200      	movs	r2, #0
 800138e:	217e      	movs	r1, #126	@ 0x7e
 8001390:	481c      	ldr	r0, [pc, #112]	@ (8001404 <MX_GPIO_Init+0xbc>)
 8001392:	f000 fe6c 	bl	800206e <HAL_GPIO_WritePin>
                          |Yellow_V_Pin|Green_V_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|EN3_Pin
 8001396:	2200      	movs	r2, #0
 8001398:	f243 71ff 	movw	r1, #14335	@ 0x37ff
 800139c:	481a      	ldr	r0, [pc, #104]	@ (8001408 <MX_GPIO_Init+0xc0>)
 800139e:	f000 fe66 	bl	800206e <HAL_GPIO_WritePin>
                          |SEG_5_Pin|SEG_6_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Red_H_Pin Yellow_H_Pin Green_H_Pin Red_V_Pin
                           Yellow_V_Pin Green_V_Pin */
  GPIO_InitStruct.Pin = Red_H_Pin|Yellow_H_Pin|Green_H_Pin|Red_V_Pin
 80013a2:	237e      	movs	r3, #126	@ 0x7e
 80013a4:	60bb      	str	r3, [r7, #8]
                          |Yellow_V_Pin|Green_V_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a6:	2301      	movs	r3, #1
 80013a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ae:	2302      	movs	r3, #2
 80013b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b2:	f107 0308 	add.w	r3, r7, #8
 80013b6:	4619      	mov	r1, r3
 80013b8:	4812      	ldr	r0, [pc, #72]	@ (8001404 <MX_GPIO_Init+0xbc>)
 80013ba:	f000 fcc5 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_0_Pin SEG_1_Pin SEG_2_Pin EN3_Pin
                           Led_Red_Blink_Pin Button_Pressed_Pin SEG_3_Pin SEG_4_Pin
                           SEG_5_Pin SEG_6_Pin EN0_Pin EN1_Pin
                           EN2_Pin */
  GPIO_InitStruct.Pin = SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|EN3_Pin
 80013be:	f243 73ff 	movw	r3, #14335	@ 0x37ff
 80013c2:	60bb      	str	r3, [r7, #8]
                          |Led_Red_Blink_Pin|Button_Pressed_Pin|SEG_3_Pin|SEG_4_Pin
                          |SEG_5_Pin|SEG_6_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c4:	2301      	movs	r3, #1
 80013c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013cc:	2302      	movs	r3, #2
 80013ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d0:	f107 0308 	add.w	r3, r7, #8
 80013d4:	4619      	mov	r1, r3
 80013d6:	480c      	ldr	r0, [pc, #48]	@ (8001408 <MX_GPIO_Init+0xc0>)
 80013d8:	f000 fcb6 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : MODE_Pin INCREASE_Pin SET_Pin */
  GPIO_InitStruct.Pin = MODE_Pin|INCREASE_Pin|SET_Pin;
 80013dc:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80013e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013e6:	2301      	movs	r3, #1
 80013e8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ea:	f107 0308 	add.w	r3, r7, #8
 80013ee:	4619      	mov	r1, r3
 80013f0:	4804      	ldr	r0, [pc, #16]	@ (8001404 <MX_GPIO_Init+0xbc>)
 80013f2:	f000 fca9 	bl	8001d48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013f6:	bf00      	nop
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40021000 	.word	0x40021000
 8001404:	40010800 	.word	0x40010800
 8001408:	40010c00 	.word	0x40010c00

0800140c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
//		getKeyInput();
		SCH_Update();
 8001414:	f000 f838 	bl	8001488 <SCH_Update>

}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001424:	b672      	cpsid	i
}
 8001426:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001428:	bf00      	nop
 800142a:	e7fd      	b.n	8001428 <Error_Handler+0x8>

0800142c <SCH_Add_Task>:
    head = NULL;
    globalTick = 0;
}

void SCH_Add_Task(void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
    TaskNode_t *newTask = (TaskNode_t *)malloc(sizeof(TaskNode_t));
 8001438:	2014      	movs	r0, #20
 800143a:	f001 fe03 	bl	8003044 <malloc>
 800143e:	4603      	mov	r3, r0
 8001440:	617b      	str	r3, [r7, #20]
    if (newTask == NULL) return;
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d017      	beq.n	8001478 <SCH_Add_Task+0x4c>

    newTask->pTask = pFunction;
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	601a      	str	r2, [r3, #0]
    newTask->Delay = DELAY;
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	68ba      	ldr	r2, [r7, #8]
 8001452:	605a      	str	r2, [r3, #4]
    newTask->Period = PERIOD / 10;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4a0a      	ldr	r2, [pc, #40]	@ (8001480 <SCH_Add_Task+0x54>)
 8001458:	fba2 2303 	umull	r2, r3, r2, r3
 800145c:	08da      	lsrs	r2, r3, #3
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	609a      	str	r2, [r3, #8]
    newTask->RunMe = 0;
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	2200      	movs	r2, #0
 8001466:	731a      	strb	r2, [r3, #12]
    newTask->next = head;
 8001468:	4b06      	ldr	r3, [pc, #24]	@ (8001484 <SCH_Add_Task+0x58>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	611a      	str	r2, [r3, #16]
    head = newTask;
 8001470:	4a04      	ldr	r2, [pc, #16]	@ (8001484 <SCH_Add_Task+0x58>)
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	e000      	b.n	800147a <SCH_Add_Task+0x4e>
    if (newTask == NULL) return;
 8001478:	bf00      	nop
}
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	cccccccd 	.word	0xcccccccd
 8001484:	20000140 	.word	0x20000140

08001488 <SCH_Update>:

void SCH_Update(void) {
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
    globalTick++;
 800148c:	4b04      	ldr	r3, [pc, #16]	@ (80014a0 <SCH_Update+0x18>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	3301      	adds	r3, #1
 8001492:	4a03      	ldr	r2, [pc, #12]	@ (80014a0 <SCH_Update+0x18>)
 8001494:	6013      	str	r3, [r2, #0]
}
 8001496:	bf00      	nop
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	20000144 	.word	0x20000144

080014a4 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
    TaskNode_t *current = head;
 80014aa:	4b20      	ldr	r3, [pc, #128]	@ (800152c <SCH_Dispatch_Tasks+0x88>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	60fb      	str	r3, [r7, #12]
    TaskNode_t *previous = NULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	60bb      	str	r3, [r7, #8]

    while (current != NULL)
 80014b4:	e032      	b.n	800151c <SCH_Dispatch_Tasks+0x78>
    {
        if (current->Delay <= globalTick)
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001530 <SCH_Dispatch_Tasks+0x8c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d810      	bhi.n	80014e4 <SCH_Dispatch_Tasks+0x40>
        {
            current->RunMe++;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	7b1b      	ldrb	r3, [r3, #12]
 80014c6:	3301      	adds	r3, #1
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	731a      	strb	r2, [r3, #12]
            if (current->Period > 0)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d006      	beq.n	80014e4 <SCH_Dispatch_Tasks+0x40>
            {
            	current->Delay = globalTick + current->Period;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	689a      	ldr	r2, [r3, #8]
 80014da:	4b15      	ldr	r3, [pc, #84]	@ (8001530 <SCH_Dispatch_Tasks+0x8c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	441a      	add	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	605a      	str	r2, [r3, #4]
            }
        }

        if (current->RunMe > 0) {
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	7b1b      	ldrb	r3, [r3, #12]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d012      	beq.n	8001512 <SCH_Dispatch_Tasks+0x6e>
            (*current->pTask)();
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4798      	blx	r3
            current->RunMe--;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	7b1b      	ldrb	r3, [r3, #12]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	731a      	strb	r2, [r3, #12]


            if (current->Period == 0) {
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d105      	bne.n	8001512 <SCH_Dispatch_Tasks+0x6e>

            	TaskNode_t *temp = current;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	607b      	str	r3, [r7, #4]

            	SCH_Delete(temp);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f000 f812 	bl	8001534 <SCH_Delete>
				continue;
 8001510:	e004      	b.n	800151c <SCH_Dispatch_Tasks+0x78>
            }
        }

        previous = current;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	60bb      	str	r3, [r7, #8]
        current = current->next;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	60fb      	str	r3, [r7, #12]
    while (current != NULL)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1c9      	bne.n	80014b6 <SCH_Dispatch_Tasks+0x12>
    }
}
 8001522:	bf00      	nop
 8001524:	bf00      	nop
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20000140 	.word	0x20000140
 8001530:	20000144 	.word	0x20000144

08001534 <SCH_Delete>:

void SCH_Delete(TaskNode_t *task) {
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
    if (head == NULL || task == NULL) return;
 800153c:	4b1a      	ldr	r3, [pc, #104]	@ (80015a8 <SCH_Delete+0x74>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d02d      	beq.n	80015a0 <SCH_Delete+0x6c>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d02a      	beq.n	80015a0 <SCH_Delete+0x6c>

    if (head == task) {
 800154a:	4b17      	ldr	r3, [pc, #92]	@ (80015a8 <SCH_Delete+0x74>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	429a      	cmp	r2, r3
 8001552:	d108      	bne.n	8001566 <SCH_Delete+0x32>
        head = head->next;
 8001554:	4b14      	ldr	r3, [pc, #80]	@ (80015a8 <SCH_Delete+0x74>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	691b      	ldr	r3, [r3, #16]
 800155a:	4a13      	ldr	r2, [pc, #76]	@ (80015a8 <SCH_Delete+0x74>)
 800155c:	6013      	str	r3, [r2, #0]
        free(task);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f001 fd78 	bl	8003054 <free>
        return;
 8001564:	e01d      	b.n	80015a2 <SCH_Delete+0x6e>
    }

    TaskNode_t *current = head;
 8001566:	4b10      	ldr	r3, [pc, #64]	@ (80015a8 <SCH_Delete+0x74>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	60fb      	str	r3, [r7, #12]
    while (current->next != NULL && current->next != task) {
 800156c:	e002      	b.n	8001574 <SCH_Delete+0x40>
        current = current->next;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	691b      	ldr	r3, [r3, #16]
 8001572:	60fb      	str	r3, [r7, #12]
    while (current->next != NULL && current->next != task) {
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d004      	beq.n	8001586 <SCH_Delete+0x52>
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	691b      	ldr	r3, [r3, #16]
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	429a      	cmp	r2, r3
 8001584:	d1f3      	bne.n	800156e <SCH_Delete+0x3a>
    }

    if (current->next == task) {
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	429a      	cmp	r2, r3
 800158e:	d108      	bne.n	80015a2 <SCH_Delete+0x6e>
        current->next = task->next;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	691a      	ldr	r2, [r3, #16]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	611a      	str	r2, [r3, #16]
        free(task);
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f001 fd5b 	bl	8003054 <free>
 800159e:	e000      	b.n	80015a2 <SCH_Delete+0x6e>
    if (head == NULL || task == NULL) return;
 80015a0:	bf00      	nop
    }
}
 80015a2:	3710      	adds	r7, #16
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000140 	.word	0x20000140

080015ac <setRedH>:
 *      Author: kanza
 */
#include "setTrafficLight.h"

void setRedH()
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, Red_H_Pin, RESET);
 80015b0:	2200      	movs	r2, #0
 80015b2:	2102      	movs	r1, #2
 80015b4:	4807      	ldr	r0, [pc, #28]	@ (80015d4 <setRedH+0x28>)
 80015b6:	f000 fd5a 	bl	800206e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, Yellow_H_Pin, SET);
 80015ba:	2201      	movs	r2, #1
 80015bc:	2104      	movs	r1, #4
 80015be:	4805      	ldr	r0, [pc, #20]	@ (80015d4 <setRedH+0x28>)
 80015c0:	f000 fd55 	bl	800206e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, Green_H_Pin, SET);
 80015c4:	2201      	movs	r2, #1
 80015c6:	2108      	movs	r1, #8
 80015c8:	4802      	ldr	r0, [pc, #8]	@ (80015d4 <setRedH+0x28>)
 80015ca:	f000 fd50 	bl	800206e <HAL_GPIO_WritePin>
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40010800 	.word	0x40010800

080015d8 <setYellowH>:

void setYellowH()
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, Red_H_Pin, SET);
 80015dc:	2201      	movs	r2, #1
 80015de:	2102      	movs	r1, #2
 80015e0:	4807      	ldr	r0, [pc, #28]	@ (8001600 <setYellowH+0x28>)
 80015e2:	f000 fd44 	bl	800206e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, Green_H_Pin, SET);
 80015e6:	2201      	movs	r2, #1
 80015e8:	2108      	movs	r1, #8
 80015ea:	4805      	ldr	r0, [pc, #20]	@ (8001600 <setYellowH+0x28>)
 80015ec:	f000 fd3f 	bl	800206e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, Yellow_H_Pin, RESET);
 80015f0:	2200      	movs	r2, #0
 80015f2:	2104      	movs	r1, #4
 80015f4:	4802      	ldr	r0, [pc, #8]	@ (8001600 <setYellowH+0x28>)
 80015f6:	f000 fd3a 	bl	800206e <HAL_GPIO_WritePin>
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40010800 	.word	0x40010800

08001604 <setGreenH>:


void setGreenH()
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, Red_H_Pin, SET);
 8001608:	2201      	movs	r2, #1
 800160a:	2102      	movs	r1, #2
 800160c:	4807      	ldr	r0, [pc, #28]	@ (800162c <setGreenH+0x28>)
 800160e:	f000 fd2e 	bl	800206e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, Green_H_Pin, RESET);
 8001612:	2200      	movs	r2, #0
 8001614:	2108      	movs	r1, #8
 8001616:	4805      	ldr	r0, [pc, #20]	@ (800162c <setGreenH+0x28>)
 8001618:	f000 fd29 	bl	800206e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, Yellow_H_Pin, SET);
 800161c:	2201      	movs	r2, #1
 800161e:	2104      	movs	r1, #4
 8001620:	4802      	ldr	r0, [pc, #8]	@ (800162c <setGreenH+0x28>)
 8001622:	f000 fd24 	bl	800206e <HAL_GPIO_WritePin>
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40010800 	.word	0x40010800

08001630 <setRedV>:

void setRedV()
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, Red_V_Pin, RESET);
 8001634:	2200      	movs	r2, #0
 8001636:	2110      	movs	r1, #16
 8001638:	4807      	ldr	r0, [pc, #28]	@ (8001658 <setRedV+0x28>)
 800163a:	f000 fd18 	bl	800206e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, Yellow_V_Pin, SET);
 800163e:	2201      	movs	r2, #1
 8001640:	2120      	movs	r1, #32
 8001642:	4805      	ldr	r0, [pc, #20]	@ (8001658 <setRedV+0x28>)
 8001644:	f000 fd13 	bl	800206e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, Green_V_Pin, SET);
 8001648:	2201      	movs	r2, #1
 800164a:	2140      	movs	r1, #64	@ 0x40
 800164c:	4802      	ldr	r0, [pc, #8]	@ (8001658 <setRedV+0x28>)
 800164e:	f000 fd0e 	bl	800206e <HAL_GPIO_WritePin>
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40010800 	.word	0x40010800

0800165c <setYellowV>:

void setYellowV()
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, Red_V_Pin, SET);
 8001660:	2201      	movs	r2, #1
 8001662:	2110      	movs	r1, #16
 8001664:	4807      	ldr	r0, [pc, #28]	@ (8001684 <setYellowV+0x28>)
 8001666:	f000 fd02 	bl	800206e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, Green_V_Pin, SET);
 800166a:	2201      	movs	r2, #1
 800166c:	2140      	movs	r1, #64	@ 0x40
 800166e:	4805      	ldr	r0, [pc, #20]	@ (8001684 <setYellowV+0x28>)
 8001670:	f000 fcfd 	bl	800206e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, Yellow_V_Pin, RESET);
 8001674:	2200      	movs	r2, #0
 8001676:	2120      	movs	r1, #32
 8001678:	4802      	ldr	r0, [pc, #8]	@ (8001684 <setYellowV+0x28>)
 800167a:	f000 fcf8 	bl	800206e <HAL_GPIO_WritePin>
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40010800 	.word	0x40010800

08001688 <setGreenV>:


void setGreenV()
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, Red_V_Pin, SET);
 800168c:	2201      	movs	r2, #1
 800168e:	2110      	movs	r1, #16
 8001690:	4807      	ldr	r0, [pc, #28]	@ (80016b0 <setGreenV+0x28>)
 8001692:	f000 fcec 	bl	800206e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, Green_V_Pin, RESET);
 8001696:	2200      	movs	r2, #0
 8001698:	2140      	movs	r1, #64	@ 0x40
 800169a:	4805      	ldr	r0, [pc, #20]	@ (80016b0 <setGreenV+0x28>)
 800169c:	f000 fce7 	bl	800206e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, Yellow_V_Pin, SET);
 80016a0:	2201      	movs	r2, #1
 80016a2:	2120      	movs	r1, #32
 80016a4:	4802      	ldr	r0, [pc, #8]	@ (80016b0 <setGreenV+0x28>)
 80016a6:	f000 fce2 	bl	800206e <HAL_GPIO_WritePin>
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40010800 	.word	0x40010800

080016b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016ba:	4b15      	ldr	r3, [pc, #84]	@ (8001710 <HAL_MspInit+0x5c>)
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	4a14      	ldr	r2, [pc, #80]	@ (8001710 <HAL_MspInit+0x5c>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	6193      	str	r3, [r2, #24]
 80016c6:	4b12      	ldr	r3, [pc, #72]	@ (8001710 <HAL_MspInit+0x5c>)
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001710 <HAL_MspInit+0x5c>)
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001710 <HAL_MspInit+0x5c>)
 80016d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016dc:	61d3      	str	r3, [r2, #28]
 80016de:	4b0c      	ldr	r3, [pc, #48]	@ (8001710 <HAL_MspInit+0x5c>)
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80016ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001714 <HAL_MspInit+0x60>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	4a04      	ldr	r2, [pc, #16]	@ (8001714 <HAL_MspInit+0x60>)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001706:	bf00      	nop
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr
 8001710:	40021000 	.word	0x40021000
 8001714:	40010000 	.word	0x40010000

08001718 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001728:	d113      	bne.n	8001752 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800172a:	4b0c      	ldr	r3, [pc, #48]	@ (800175c <HAL_TIM_Base_MspInit+0x44>)
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	4a0b      	ldr	r2, [pc, #44]	@ (800175c <HAL_TIM_Base_MspInit+0x44>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	61d3      	str	r3, [r2, #28]
 8001736:	4b09      	ldr	r3, [pc, #36]	@ (800175c <HAL_TIM_Base_MspInit+0x44>)
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001742:	2200      	movs	r2, #0
 8001744:	2100      	movs	r1, #0
 8001746:	201c      	movs	r0, #28
 8001748:	f000 fac7 	bl	8001cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800174c:	201c      	movs	r0, #28
 800174e:	f000 fae0 	bl	8001d12 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001752:	bf00      	nop
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40021000 	.word	0x40021000

08001760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001764:	bf00      	nop
 8001766:	e7fd      	b.n	8001764 <NMI_Handler+0x4>

08001768 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800176c:	bf00      	nop
 800176e:	e7fd      	b.n	800176c <HardFault_Handler+0x4>

08001770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001774:	bf00      	nop
 8001776:	e7fd      	b.n	8001774 <MemManage_Handler+0x4>

08001778 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <BusFault_Handler+0x4>

08001780 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001784:	bf00      	nop
 8001786:	e7fd      	b.n	8001784 <UsageFault_Handler+0x4>

08001788 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr

08001794 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr

080017a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr

080017ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017b0:	f000 f9a0 	bl	8001af4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017b4:	bf00      	nop
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017bc:	4802      	ldr	r0, [pc, #8]	@ (80017c8 <TIM2_IRQHandler+0x10>)
 80017be:	f001 f901 	bl	80029c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	200000f8 	.word	0x200000f8

080017cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017d4:	4a14      	ldr	r2, [pc, #80]	@ (8001828 <_sbrk+0x5c>)
 80017d6:	4b15      	ldr	r3, [pc, #84]	@ (800182c <_sbrk+0x60>)
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017e0:	4b13      	ldr	r3, [pc, #76]	@ (8001830 <_sbrk+0x64>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d102      	bne.n	80017ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017e8:	4b11      	ldr	r3, [pc, #68]	@ (8001830 <_sbrk+0x64>)
 80017ea:	4a12      	ldr	r2, [pc, #72]	@ (8001834 <_sbrk+0x68>)
 80017ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ee:	4b10      	ldr	r3, [pc, #64]	@ (8001830 <_sbrk+0x64>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4413      	add	r3, r2
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d207      	bcs.n	800180c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017fc:	f001 fcf8 	bl	80031f0 <__errno>
 8001800:	4603      	mov	r3, r0
 8001802:	220c      	movs	r2, #12
 8001804:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001806:	f04f 33ff 	mov.w	r3, #4294967295
 800180a:	e009      	b.n	8001820 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800180c:	4b08      	ldr	r3, [pc, #32]	@ (8001830 <_sbrk+0x64>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001812:	4b07      	ldr	r3, [pc, #28]	@ (8001830 <_sbrk+0x64>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4413      	add	r3, r2
 800181a:	4a05      	ldr	r2, [pc, #20]	@ (8001830 <_sbrk+0x64>)
 800181c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800181e:	68fb      	ldr	r3, [r7, #12]
}
 8001820:	4618      	mov	r0, r3
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20002800 	.word	0x20002800
 800182c:	00000400 	.word	0x00000400
 8001830:	20000148 	.word	0x20000148
 8001834:	200002b0 	.word	0x200002b0

08001838 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr

08001844 <setTimerpure>:

int timerLED7_counter = 0;
int timerLED7_flag = 1;

void setTimerpure(int duration)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
	timer_pure_counter = duration / Tick;
 800184c:	4b07      	ldr	r3, [pc, #28]	@ (800186c <setTimerpure+0x28>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	fb92 f3f3 	sdiv	r3, r2, r3
 8001856:	4a06      	ldr	r2, [pc, #24]	@ (8001870 <setTimerpure+0x2c>)
 8001858:	6013      	str	r3, [r2, #0]
	timer_pure_flag = 0;
 800185a:	4b06      	ldr	r3, [pc, #24]	@ (8001874 <setTimerpure+0x30>)
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	bc80      	pop	{r7}
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	20000048 	.word	0x20000048
 8001870:	2000014c 	.word	0x2000014c
 8001874:	2000004c 	.word	0x2000004c

08001878 <setTimerTrafficHorizontal>:



void setTimerTrafficHorizontal(int duration)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
	timerTrafficHorizontal_counter = duration / Tick;
 8001880:	4b07      	ldr	r3, [pc, #28]	@ (80018a0 <setTimerTrafficHorizontal+0x28>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	fb92 f3f3 	sdiv	r3, r2, r3
 800188a:	4a06      	ldr	r2, [pc, #24]	@ (80018a4 <setTimerTrafficHorizontal+0x2c>)
 800188c:	6013      	str	r3, [r2, #0]
	timerTrafficHorizontal_flag = 0;
 800188e:	4b06      	ldr	r3, [pc, #24]	@ (80018a8 <setTimerTrafficHorizontal+0x30>)
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	bc80      	pop	{r7}
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	20000048 	.word	0x20000048
 80018a4:	20000150 	.word	0x20000150
 80018a8:	20000050 	.word	0x20000050

080018ac <setTimerTrafficVertical>:

void setTimerTrafficVertical(int duration)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
	timerTrafficVertical_counter = duration / Tick;
 80018b4:	4b07      	ldr	r3, [pc, #28]	@ (80018d4 <setTimerTrafficVertical+0x28>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80018be:	4a06      	ldr	r2, [pc, #24]	@ (80018d8 <setTimerTrafficVertical+0x2c>)
 80018c0:	6013      	str	r3, [r2, #0]
	timerTrafficVertical_flag = 0;
 80018c2:	4b06      	ldr	r3, [pc, #24]	@ (80018dc <setTimerTrafficVertical+0x30>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bc80      	pop	{r7}
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	20000048 	.word	0x20000048
 80018d8:	20000154 	.word	0x20000154
 80018dc:	20000054 	.word	0x20000054

080018e0 <setTimerBlink>:

void setTimerBlink(int duration) {
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
	timerBlink_counter = duration / Tick;
 80018e8:	4b07      	ldr	r3, [pc, #28]	@ (8001908 <setTimerBlink+0x28>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80018f2:	4a06      	ldr	r2, [pc, #24]	@ (800190c <setTimerBlink+0x2c>)
 80018f4:	6013      	str	r3, [r2, #0]
	timerBlink_flag = 0;
 80018f6:	4b06      	ldr	r3, [pc, #24]	@ (8001910 <setTimerBlink+0x30>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	bc80      	pop	{r7}
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	20000048 	.word	0x20000048
 800190c:	20000158 	.word	0x20000158
 8001910:	20000058 	.word	0x20000058

08001914 <setTimerLED7>:

void setTimerLED7(int duration)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
	timerLED7_counter = duration / Tick;
 800191c:	4b07      	ldr	r3, [pc, #28]	@ (800193c <setTimerLED7+0x28>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	fb92 f3f3 	sdiv	r3, r2, r3
 8001926:	4a06      	ldr	r2, [pc, #24]	@ (8001940 <setTimerLED7+0x2c>)
 8001928:	6013      	str	r3, [r2, #0]
	timerLED7_flag = 0;
 800192a:	4b06      	ldr	r3, [pc, #24]	@ (8001944 <setTimerLED7+0x30>)
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	bc80      	pop	{r7}
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	20000048 	.word	0x20000048
 8001940:	2000015c 	.word	0x2000015c
 8001944:	2000005c 	.word	0x2000005c

08001948 <timer_run>:

void timer_run()
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0

	if(timer_pure_counter > 0)
 800194c:	4b29      	ldr	r3, [pc, #164]	@ (80019f4 <timer_run+0xac>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	dd0b      	ble.n	800196c <timer_run+0x24>
	{
		timer_pure_counter--;
 8001954:	4b27      	ldr	r3, [pc, #156]	@ (80019f4 <timer_run+0xac>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	3b01      	subs	r3, #1
 800195a:	4a26      	ldr	r2, [pc, #152]	@ (80019f4 <timer_run+0xac>)
 800195c:	6013      	str	r3, [r2, #0]
		if(timer_pure_counter == 0)
 800195e:	4b25      	ldr	r3, [pc, #148]	@ (80019f4 <timer_run+0xac>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d102      	bne.n	800196c <timer_run+0x24>
		{
			timer_pure_flag = 1;
 8001966:	4b24      	ldr	r3, [pc, #144]	@ (80019f8 <timer_run+0xb0>)
 8001968:	2201      	movs	r2, #1
 800196a:	601a      	str	r2, [r3, #0]
		}
	}

	if (timerTrafficHorizontal_counter > 0)
 800196c:	4b23      	ldr	r3, [pc, #140]	@ (80019fc <timer_run+0xb4>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	dd0b      	ble.n	800198c <timer_run+0x44>
	{
		timerTrafficHorizontal_counter--;
 8001974:	4b21      	ldr	r3, [pc, #132]	@ (80019fc <timer_run+0xb4>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	3b01      	subs	r3, #1
 800197a:	4a20      	ldr	r2, [pc, #128]	@ (80019fc <timer_run+0xb4>)
 800197c:	6013      	str	r3, [r2, #0]
		if (timerTrafficHorizontal_counter == 0)
 800197e:	4b1f      	ldr	r3, [pc, #124]	@ (80019fc <timer_run+0xb4>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d102      	bne.n	800198c <timer_run+0x44>
			timerTrafficHorizontal_flag = 1;
 8001986:	4b1e      	ldr	r3, [pc, #120]	@ (8001a00 <timer_run+0xb8>)
 8001988:	2201      	movs	r2, #1
 800198a:	601a      	str	r2, [r3, #0]
	}

	if (timerTrafficVertical_counter > 0)
 800198c:	4b1d      	ldr	r3, [pc, #116]	@ (8001a04 <timer_run+0xbc>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	dd0b      	ble.n	80019ac <timer_run+0x64>
	{
		timerTrafficVertical_counter--;
 8001994:	4b1b      	ldr	r3, [pc, #108]	@ (8001a04 <timer_run+0xbc>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	3b01      	subs	r3, #1
 800199a:	4a1a      	ldr	r2, [pc, #104]	@ (8001a04 <timer_run+0xbc>)
 800199c:	6013      	str	r3, [r2, #0]
		if (timerTrafficVertical_counter == 0)
 800199e:	4b19      	ldr	r3, [pc, #100]	@ (8001a04 <timer_run+0xbc>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d102      	bne.n	80019ac <timer_run+0x64>
			timerTrafficVertical_flag = 1;
 80019a6:	4b18      	ldr	r3, [pc, #96]	@ (8001a08 <timer_run+0xc0>)
 80019a8:	2201      	movs	r2, #1
 80019aa:	601a      	str	r2, [r3, #0]
	}

	if (timerBlink_counter > 0)
 80019ac:	4b17      	ldr	r3, [pc, #92]	@ (8001a0c <timer_run+0xc4>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	dd0b      	ble.n	80019cc <timer_run+0x84>
	{
		timerBlink_counter--;
 80019b4:	4b15      	ldr	r3, [pc, #84]	@ (8001a0c <timer_run+0xc4>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	3b01      	subs	r3, #1
 80019ba:	4a14      	ldr	r2, [pc, #80]	@ (8001a0c <timer_run+0xc4>)
 80019bc:	6013      	str	r3, [r2, #0]
		if (timerBlink_counter == 0)
 80019be:	4b13      	ldr	r3, [pc, #76]	@ (8001a0c <timer_run+0xc4>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d102      	bne.n	80019cc <timer_run+0x84>
			timerBlink_flag = 1;
 80019c6:	4b12      	ldr	r3, [pc, #72]	@ (8001a10 <timer_run+0xc8>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	601a      	str	r2, [r3, #0]
	}

	if (timerLED7_counter > 0)
 80019cc:	4b11      	ldr	r3, [pc, #68]	@ (8001a14 <timer_run+0xcc>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	dd0b      	ble.n	80019ec <timer_run+0xa4>
	{
		timerLED7_counter--;
 80019d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001a14 <timer_run+0xcc>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	3b01      	subs	r3, #1
 80019da:	4a0e      	ldr	r2, [pc, #56]	@ (8001a14 <timer_run+0xcc>)
 80019dc:	6013      	str	r3, [r2, #0]
		if (timerLED7_counter == 0)
 80019de:	4b0d      	ldr	r3, [pc, #52]	@ (8001a14 <timer_run+0xcc>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d102      	bne.n	80019ec <timer_run+0xa4>
			timerLED7_flag = 1;
 80019e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001a18 <timer_run+0xd0>)
 80019e8:	2201      	movs	r2, #1
 80019ea:	601a      	str	r2, [r3, #0]
	}


}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr
 80019f4:	2000014c 	.word	0x2000014c
 80019f8:	2000004c 	.word	0x2000004c
 80019fc:	20000150 	.word	0x20000150
 8001a00:	20000050 	.word	0x20000050
 8001a04:	20000154 	.word	0x20000154
 8001a08:	20000054 	.word	0x20000054
 8001a0c:	20000158 	.word	0x20000158
 8001a10:	20000058 	.word	0x20000058
 8001a14:	2000015c 	.word	0x2000015c
 8001a18:	2000005c 	.word	0x2000005c

08001a1c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a1c:	480c      	ldr	r0, [pc, #48]	@ (8001a50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a1e:	490d      	ldr	r1, [pc, #52]	@ (8001a54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a20:	4a0d      	ldr	r2, [pc, #52]	@ (8001a58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a24:	e002      	b.n	8001a2c <LoopCopyDataInit>

08001a26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a2a:	3304      	adds	r3, #4

08001a2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a30:	d3f9      	bcc.n	8001a26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a32:	4a0a      	ldr	r2, [pc, #40]	@ (8001a5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a34:	4c0a      	ldr	r4, [pc, #40]	@ (8001a60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a38:	e001      	b.n	8001a3e <LoopFillZerobss>

08001a3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a3c:	3204      	adds	r2, #4

08001a3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a40:	d3fb      	bcc.n	8001a3a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a42:	f7ff fef9 	bl	8001838 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a46:	f001 fbd9 	bl	80031fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a4a:	f7ff fbb9 	bl	80011c0 <main>
  bx lr
 8001a4e:	4770      	bx	lr
  ldr r0, =_sdata
 8001a50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a54:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8001a58:	0800331c 	.word	0x0800331c
  ldr r2, =_sbss
 8001a5c:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8001a60:	200002ac 	.word	0x200002ac

08001a64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a64:	e7fe      	b.n	8001a64 <ADC1_2_IRQHandler>
	...

08001a68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a6c:	4b08      	ldr	r3, [pc, #32]	@ (8001a90 <HAL_Init+0x28>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a07      	ldr	r2, [pc, #28]	@ (8001a90 <HAL_Init+0x28>)
 8001a72:	f043 0310 	orr.w	r3, r3, #16
 8001a76:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a78:	2003      	movs	r0, #3
 8001a7a:	f000 f923 	bl	8001cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a7e:	200f      	movs	r0, #15
 8001a80:	f000 f808 	bl	8001a94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a84:	f7ff fe16 	bl	80016b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40022000 	.word	0x40022000

08001a94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a9c:	4b12      	ldr	r3, [pc, #72]	@ (8001ae8 <HAL_InitTick+0x54>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4b12      	ldr	r3, [pc, #72]	@ (8001aec <HAL_InitTick+0x58>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001aaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f000 f93b 	bl	8001d2e <HAL_SYSTICK_Config>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e00e      	b.n	8001ae0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b0f      	cmp	r3, #15
 8001ac6:	d80a      	bhi.n	8001ade <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	6879      	ldr	r1, [r7, #4]
 8001acc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad0:	f000 f903 	bl	8001cda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ad4:	4a06      	ldr	r2, [pc, #24]	@ (8001af0 <HAL_InitTick+0x5c>)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ada:	2300      	movs	r3, #0
 8001adc:	e000      	b.n	8001ae0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20000044 	.word	0x20000044
 8001aec:	20000064 	.word	0x20000064
 8001af0:	20000060 	.word	0x20000060

08001af4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001af8:	4b05      	ldr	r3, [pc, #20]	@ (8001b10 <HAL_IncTick+0x1c>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	461a      	mov	r2, r3
 8001afe:	4b05      	ldr	r3, [pc, #20]	@ (8001b14 <HAL_IncTick+0x20>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4413      	add	r3, r2
 8001b04:	4a03      	ldr	r2, [pc, #12]	@ (8001b14 <HAL_IncTick+0x20>)
 8001b06:	6013      	str	r3, [r2, #0]
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr
 8001b10:	20000064 	.word	0x20000064
 8001b14:	20000160 	.word	0x20000160

08001b18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b1c:	4b02      	ldr	r3, [pc, #8]	@ (8001b28 <HAL_GetTick+0x10>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr
 8001b28:	20000160 	.word	0x20000160

08001b2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b70 <__NVIC_SetPriorityGrouping+0x44>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b42:	68ba      	ldr	r2, [r7, #8]
 8001b44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b48:	4013      	ands	r3, r2
 8001b4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b5e:	4a04      	ldr	r2, [pc, #16]	@ (8001b70 <__NVIC_SetPriorityGrouping+0x44>)
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	60d3      	str	r3, [r2, #12]
}
 8001b64:	bf00      	nop
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bc80      	pop	{r7}
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b78:	4b04      	ldr	r3, [pc, #16]	@ (8001b8c <__NVIC_GetPriorityGrouping+0x18>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	0a1b      	lsrs	r3, r3, #8
 8001b7e:	f003 0307 	and.w	r3, r3, #7
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bc80      	pop	{r7}
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	db0b      	blt.n	8001bba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	f003 021f 	and.w	r2, r3, #31
 8001ba8:	4906      	ldr	r1, [pc, #24]	@ (8001bc4 <__NVIC_EnableIRQ+0x34>)
 8001baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bae:	095b      	lsrs	r3, r3, #5
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8001bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr
 8001bc4:	e000e100 	.word	0xe000e100

08001bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	6039      	str	r1, [r7, #0]
 8001bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	db0a      	blt.n	8001bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	490c      	ldr	r1, [pc, #48]	@ (8001c14 <__NVIC_SetPriority+0x4c>)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	0112      	lsls	r2, r2, #4
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	440b      	add	r3, r1
 8001bec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf0:	e00a      	b.n	8001c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	4908      	ldr	r1, [pc, #32]	@ (8001c18 <__NVIC_SetPriority+0x50>)
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	3b04      	subs	r3, #4
 8001c00:	0112      	lsls	r2, r2, #4
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	440b      	add	r3, r1
 8001c06:	761a      	strb	r2, [r3, #24]
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bc80      	pop	{r7}
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	e000e100 	.word	0xe000e100
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b089      	sub	sp, #36	@ 0x24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f1c3 0307 	rsb	r3, r3, #7
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	bf28      	it	cs
 8001c3a:	2304      	movcs	r3, #4
 8001c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3304      	adds	r3, #4
 8001c42:	2b06      	cmp	r3, #6
 8001c44:	d902      	bls.n	8001c4c <NVIC_EncodePriority+0x30>
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3b03      	subs	r3, #3
 8001c4a:	e000      	b.n	8001c4e <NVIC_EncodePriority+0x32>
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c50:	f04f 32ff 	mov.w	r2, #4294967295
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43da      	mvns	r2, r3
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	401a      	ands	r2, r3
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c64:	f04f 31ff 	mov.w	r1, #4294967295
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6e:	43d9      	mvns	r1, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c74:	4313      	orrs	r3, r2
         );
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3724      	adds	r7, #36	@ 0x24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr

08001c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c90:	d301      	bcc.n	8001c96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c92:	2301      	movs	r3, #1
 8001c94:	e00f      	b.n	8001cb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c96:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc0 <SysTick_Config+0x40>)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c9e:	210f      	movs	r1, #15
 8001ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca4:	f7ff ff90 	bl	8001bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ca8:	4b05      	ldr	r3, [pc, #20]	@ (8001cc0 <SysTick_Config+0x40>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cae:	4b04      	ldr	r3, [pc, #16]	@ (8001cc0 <SysTick_Config+0x40>)
 8001cb0:	2207      	movs	r2, #7
 8001cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	e000e010 	.word	0xe000e010

08001cc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f7ff ff2d 	bl	8001b2c <__NVIC_SetPriorityGrouping>
}
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b086      	sub	sp, #24
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	60b9      	str	r1, [r7, #8]
 8001ce4:	607a      	str	r2, [r7, #4]
 8001ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cec:	f7ff ff42 	bl	8001b74 <__NVIC_GetPriorityGrouping>
 8001cf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	68b9      	ldr	r1, [r7, #8]
 8001cf6:	6978      	ldr	r0, [r7, #20]
 8001cf8:	f7ff ff90 	bl	8001c1c <NVIC_EncodePriority>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d02:	4611      	mov	r1, r2
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff ff5f 	bl	8001bc8 <__NVIC_SetPriority>
}
 8001d0a:	bf00      	nop
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	4603      	mov	r3, r0
 8001d1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff ff35 	bl	8001b90 <__NVIC_EnableIRQ>
}
 8001d26:	bf00      	nop
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7ff ffa2 	bl	8001c80 <SysTick_Config>
 8001d3c:	4603      	mov	r3, r0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
	...

08001d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b08b      	sub	sp, #44	@ 0x2c
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d52:	2300      	movs	r3, #0
 8001d54:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d56:	2300      	movs	r3, #0
 8001d58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d5a:	e161      	b.n	8002020 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	69fa      	ldr	r2, [r7, #28]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	f040 8150 	bne.w	800201a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	4a97      	ldr	r2, [pc, #604]	@ (8001fdc <HAL_GPIO_Init+0x294>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d05e      	beq.n	8001e42 <HAL_GPIO_Init+0xfa>
 8001d84:	4a95      	ldr	r2, [pc, #596]	@ (8001fdc <HAL_GPIO_Init+0x294>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d875      	bhi.n	8001e76 <HAL_GPIO_Init+0x12e>
 8001d8a:	4a95      	ldr	r2, [pc, #596]	@ (8001fe0 <HAL_GPIO_Init+0x298>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d058      	beq.n	8001e42 <HAL_GPIO_Init+0xfa>
 8001d90:	4a93      	ldr	r2, [pc, #588]	@ (8001fe0 <HAL_GPIO_Init+0x298>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d86f      	bhi.n	8001e76 <HAL_GPIO_Init+0x12e>
 8001d96:	4a93      	ldr	r2, [pc, #588]	@ (8001fe4 <HAL_GPIO_Init+0x29c>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d052      	beq.n	8001e42 <HAL_GPIO_Init+0xfa>
 8001d9c:	4a91      	ldr	r2, [pc, #580]	@ (8001fe4 <HAL_GPIO_Init+0x29c>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d869      	bhi.n	8001e76 <HAL_GPIO_Init+0x12e>
 8001da2:	4a91      	ldr	r2, [pc, #580]	@ (8001fe8 <HAL_GPIO_Init+0x2a0>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d04c      	beq.n	8001e42 <HAL_GPIO_Init+0xfa>
 8001da8:	4a8f      	ldr	r2, [pc, #572]	@ (8001fe8 <HAL_GPIO_Init+0x2a0>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d863      	bhi.n	8001e76 <HAL_GPIO_Init+0x12e>
 8001dae:	4a8f      	ldr	r2, [pc, #572]	@ (8001fec <HAL_GPIO_Init+0x2a4>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d046      	beq.n	8001e42 <HAL_GPIO_Init+0xfa>
 8001db4:	4a8d      	ldr	r2, [pc, #564]	@ (8001fec <HAL_GPIO_Init+0x2a4>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d85d      	bhi.n	8001e76 <HAL_GPIO_Init+0x12e>
 8001dba:	2b12      	cmp	r3, #18
 8001dbc:	d82a      	bhi.n	8001e14 <HAL_GPIO_Init+0xcc>
 8001dbe:	2b12      	cmp	r3, #18
 8001dc0:	d859      	bhi.n	8001e76 <HAL_GPIO_Init+0x12e>
 8001dc2:	a201      	add	r2, pc, #4	@ (adr r2, 8001dc8 <HAL_GPIO_Init+0x80>)
 8001dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc8:	08001e43 	.word	0x08001e43
 8001dcc:	08001e1d 	.word	0x08001e1d
 8001dd0:	08001e2f 	.word	0x08001e2f
 8001dd4:	08001e71 	.word	0x08001e71
 8001dd8:	08001e77 	.word	0x08001e77
 8001ddc:	08001e77 	.word	0x08001e77
 8001de0:	08001e77 	.word	0x08001e77
 8001de4:	08001e77 	.word	0x08001e77
 8001de8:	08001e77 	.word	0x08001e77
 8001dec:	08001e77 	.word	0x08001e77
 8001df0:	08001e77 	.word	0x08001e77
 8001df4:	08001e77 	.word	0x08001e77
 8001df8:	08001e77 	.word	0x08001e77
 8001dfc:	08001e77 	.word	0x08001e77
 8001e00:	08001e77 	.word	0x08001e77
 8001e04:	08001e77 	.word	0x08001e77
 8001e08:	08001e77 	.word	0x08001e77
 8001e0c:	08001e25 	.word	0x08001e25
 8001e10:	08001e39 	.word	0x08001e39
 8001e14:	4a76      	ldr	r2, [pc, #472]	@ (8001ff0 <HAL_GPIO_Init+0x2a8>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d013      	beq.n	8001e42 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e1a:	e02c      	b.n	8001e76 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	623b      	str	r3, [r7, #32]
          break;
 8001e22:	e029      	b.n	8001e78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	3304      	adds	r3, #4
 8001e2a:	623b      	str	r3, [r7, #32]
          break;
 8001e2c:	e024      	b.n	8001e78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	3308      	adds	r3, #8
 8001e34:	623b      	str	r3, [r7, #32]
          break;
 8001e36:	e01f      	b.n	8001e78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	330c      	adds	r3, #12
 8001e3e:	623b      	str	r3, [r7, #32]
          break;
 8001e40:	e01a      	b.n	8001e78 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d102      	bne.n	8001e50 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e4a:	2304      	movs	r3, #4
 8001e4c:	623b      	str	r3, [r7, #32]
          break;
 8001e4e:	e013      	b.n	8001e78 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d105      	bne.n	8001e64 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e58:	2308      	movs	r3, #8
 8001e5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69fa      	ldr	r2, [r7, #28]
 8001e60:	611a      	str	r2, [r3, #16]
          break;
 8001e62:	e009      	b.n	8001e78 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e64:	2308      	movs	r3, #8
 8001e66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	69fa      	ldr	r2, [r7, #28]
 8001e6c:	615a      	str	r2, [r3, #20]
          break;
 8001e6e:	e003      	b.n	8001e78 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e70:	2300      	movs	r3, #0
 8001e72:	623b      	str	r3, [r7, #32]
          break;
 8001e74:	e000      	b.n	8001e78 <HAL_GPIO_Init+0x130>
          break;
 8001e76:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	2bff      	cmp	r3, #255	@ 0xff
 8001e7c:	d801      	bhi.n	8001e82 <HAL_GPIO_Init+0x13a>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	e001      	b.n	8001e86 <HAL_GPIO_Init+0x13e>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	3304      	adds	r3, #4
 8001e86:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	2bff      	cmp	r3, #255	@ 0xff
 8001e8c:	d802      	bhi.n	8001e94 <HAL_GPIO_Init+0x14c>
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	e002      	b.n	8001e9a <HAL_GPIO_Init+0x152>
 8001e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e96:	3b08      	subs	r3, #8
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	210f      	movs	r1, #15
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	401a      	ands	r2, r3
 8001eac:	6a39      	ldr	r1, [r7, #32]
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f000 80a9 	beq.w	800201a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ec8:	4b4a      	ldr	r3, [pc, #296]	@ (8001ff4 <HAL_GPIO_Init+0x2ac>)
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	4a49      	ldr	r2, [pc, #292]	@ (8001ff4 <HAL_GPIO_Init+0x2ac>)
 8001ece:	f043 0301 	orr.w	r3, r3, #1
 8001ed2:	6193      	str	r3, [r2, #24]
 8001ed4:	4b47      	ldr	r3, [pc, #284]	@ (8001ff4 <HAL_GPIO_Init+0x2ac>)
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	60bb      	str	r3, [r7, #8]
 8001ede:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ee0:	4a45      	ldr	r2, [pc, #276]	@ (8001ff8 <HAL_GPIO_Init+0x2b0>)
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee4:	089b      	lsrs	r3, r3, #2
 8001ee6:	3302      	adds	r3, #2
 8001ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef0:	f003 0303 	and.w	r3, r3, #3
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	220f      	movs	r2, #15
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	43db      	mvns	r3, r3
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	4013      	ands	r3, r2
 8001f02:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a3d      	ldr	r2, [pc, #244]	@ (8001ffc <HAL_GPIO_Init+0x2b4>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d00d      	beq.n	8001f28 <HAL_GPIO_Init+0x1e0>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a3c      	ldr	r2, [pc, #240]	@ (8002000 <HAL_GPIO_Init+0x2b8>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d007      	beq.n	8001f24 <HAL_GPIO_Init+0x1dc>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a3b      	ldr	r2, [pc, #236]	@ (8002004 <HAL_GPIO_Init+0x2bc>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d101      	bne.n	8001f20 <HAL_GPIO_Init+0x1d8>
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	e004      	b.n	8001f2a <HAL_GPIO_Init+0x1e2>
 8001f20:	2303      	movs	r3, #3
 8001f22:	e002      	b.n	8001f2a <HAL_GPIO_Init+0x1e2>
 8001f24:	2301      	movs	r3, #1
 8001f26:	e000      	b.n	8001f2a <HAL_GPIO_Init+0x1e2>
 8001f28:	2300      	movs	r3, #0
 8001f2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f2c:	f002 0203 	and.w	r2, r2, #3
 8001f30:	0092      	lsls	r2, r2, #2
 8001f32:	4093      	lsls	r3, r2
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f3a:	492f      	ldr	r1, [pc, #188]	@ (8001ff8 <HAL_GPIO_Init+0x2b0>)
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f3e:	089b      	lsrs	r3, r3, #2
 8001f40:	3302      	adds	r3, #2
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d006      	beq.n	8001f62 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f54:	4b2c      	ldr	r3, [pc, #176]	@ (8002008 <HAL_GPIO_Init+0x2c0>)
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	492b      	ldr	r1, [pc, #172]	@ (8002008 <HAL_GPIO_Init+0x2c0>)
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	608b      	str	r3, [r1, #8]
 8001f60:	e006      	b.n	8001f70 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f62:	4b29      	ldr	r3, [pc, #164]	@ (8002008 <HAL_GPIO_Init+0x2c0>)
 8001f64:	689a      	ldr	r2, [r3, #8]
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	4927      	ldr	r1, [pc, #156]	@ (8002008 <HAL_GPIO_Init+0x2c0>)
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d006      	beq.n	8001f8a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f7c:	4b22      	ldr	r3, [pc, #136]	@ (8002008 <HAL_GPIO_Init+0x2c0>)
 8001f7e:	68da      	ldr	r2, [r3, #12]
 8001f80:	4921      	ldr	r1, [pc, #132]	@ (8002008 <HAL_GPIO_Init+0x2c0>)
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	60cb      	str	r3, [r1, #12]
 8001f88:	e006      	b.n	8001f98 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f8a:	4b1f      	ldr	r3, [pc, #124]	@ (8002008 <HAL_GPIO_Init+0x2c0>)
 8001f8c:	68da      	ldr	r2, [r3, #12]
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	43db      	mvns	r3, r3
 8001f92:	491d      	ldr	r1, [pc, #116]	@ (8002008 <HAL_GPIO_Init+0x2c0>)
 8001f94:	4013      	ands	r3, r2
 8001f96:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d006      	beq.n	8001fb2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fa4:	4b18      	ldr	r3, [pc, #96]	@ (8002008 <HAL_GPIO_Init+0x2c0>)
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	4917      	ldr	r1, [pc, #92]	@ (8002008 <HAL_GPIO_Init+0x2c0>)
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	604b      	str	r3, [r1, #4]
 8001fb0:	e006      	b.n	8001fc0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fb2:	4b15      	ldr	r3, [pc, #84]	@ (8002008 <HAL_GPIO_Init+0x2c0>)
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	4913      	ldr	r1, [pc, #76]	@ (8002008 <HAL_GPIO_Init+0x2c0>)
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d01f      	beq.n	800200c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fcc:	4b0e      	ldr	r3, [pc, #56]	@ (8002008 <HAL_GPIO_Init+0x2c0>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	490d      	ldr	r1, [pc, #52]	@ (8002008 <HAL_GPIO_Init+0x2c0>)
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	600b      	str	r3, [r1, #0]
 8001fd8:	e01f      	b.n	800201a <HAL_GPIO_Init+0x2d2>
 8001fda:	bf00      	nop
 8001fdc:	10320000 	.word	0x10320000
 8001fe0:	10310000 	.word	0x10310000
 8001fe4:	10220000 	.word	0x10220000
 8001fe8:	10210000 	.word	0x10210000
 8001fec:	10120000 	.word	0x10120000
 8001ff0:	10110000 	.word	0x10110000
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	40010000 	.word	0x40010000
 8001ffc:	40010800 	.word	0x40010800
 8002000:	40010c00 	.word	0x40010c00
 8002004:	40011000 	.word	0x40011000
 8002008:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800200c:	4b0b      	ldr	r3, [pc, #44]	@ (800203c <HAL_GPIO_Init+0x2f4>)
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	43db      	mvns	r3, r3
 8002014:	4909      	ldr	r1, [pc, #36]	@ (800203c <HAL_GPIO_Init+0x2f4>)
 8002016:	4013      	ands	r3, r2
 8002018:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800201a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201c:	3301      	adds	r3, #1
 800201e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002026:	fa22 f303 	lsr.w	r3, r2, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	f47f ae96 	bne.w	8001d5c <HAL_GPIO_Init+0x14>
  }
}
 8002030:	bf00      	nop
 8002032:	bf00      	nop
 8002034:	372c      	adds	r7, #44	@ 0x2c
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr
 800203c:	40010400 	.word	0x40010400

08002040 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	460b      	mov	r3, r1
 800204a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	887b      	ldrh	r3, [r7, #2]
 8002052:	4013      	ands	r3, r2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d002      	beq.n	800205e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002058:	2301      	movs	r3, #1
 800205a:	73fb      	strb	r3, [r7, #15]
 800205c:	e001      	b.n	8002062 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800205e:	2300      	movs	r3, #0
 8002060:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002062:	7bfb      	ldrb	r3, [r7, #15]
}
 8002064:	4618      	mov	r0, r3
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr

0800206e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800206e:	b480      	push	{r7}
 8002070:	b083      	sub	sp, #12
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
 8002076:	460b      	mov	r3, r1
 8002078:	807b      	strh	r3, [r7, #2]
 800207a:	4613      	mov	r3, r2
 800207c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800207e:	787b      	ldrb	r3, [r7, #1]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d003      	beq.n	800208c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002084:	887a      	ldrh	r2, [r7, #2]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800208a:	e003      	b.n	8002094 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800208c:	887b      	ldrh	r3, [r7, #2]
 800208e:	041a      	lsls	r2, r3, #16
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	611a      	str	r2, [r3, #16]
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	bc80      	pop	{r7}
 800209c:	4770      	bx	lr

0800209e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800209e:	b480      	push	{r7}
 80020a0:	b085      	sub	sp, #20
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
 80020a6:	460b      	mov	r3, r1
 80020a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020b0:	887a      	ldrh	r2, [r7, #2]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	4013      	ands	r3, r2
 80020b6:	041a      	lsls	r2, r3, #16
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	43d9      	mvns	r1, r3
 80020bc:	887b      	ldrh	r3, [r7, #2]
 80020be:	400b      	ands	r3, r1
 80020c0:	431a      	orrs	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	611a      	str	r2, [r3, #16]
}
 80020c6:	bf00      	nop
 80020c8:	3714      	adds	r7, #20
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr

080020d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e272      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f000 8087 	beq.w	80021fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020f0:	4b92      	ldr	r3, [pc, #584]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f003 030c 	and.w	r3, r3, #12
 80020f8:	2b04      	cmp	r3, #4
 80020fa:	d00c      	beq.n	8002116 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020fc:	4b8f      	ldr	r3, [pc, #572]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f003 030c 	and.w	r3, r3, #12
 8002104:	2b08      	cmp	r3, #8
 8002106:	d112      	bne.n	800212e <HAL_RCC_OscConfig+0x5e>
 8002108:	4b8c      	ldr	r3, [pc, #560]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002110:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002114:	d10b      	bne.n	800212e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002116:	4b89      	ldr	r3, [pc, #548]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d06c      	beq.n	80021fc <HAL_RCC_OscConfig+0x12c>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d168      	bne.n	80021fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e24c      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002136:	d106      	bne.n	8002146 <HAL_RCC_OscConfig+0x76>
 8002138:	4b80      	ldr	r3, [pc, #512]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a7f      	ldr	r2, [pc, #508]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 800213e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002142:	6013      	str	r3, [r2, #0]
 8002144:	e02e      	b.n	80021a4 <HAL_RCC_OscConfig+0xd4>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d10c      	bne.n	8002168 <HAL_RCC_OscConfig+0x98>
 800214e:	4b7b      	ldr	r3, [pc, #492]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a7a      	ldr	r2, [pc, #488]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002154:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	4b78      	ldr	r3, [pc, #480]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a77      	ldr	r2, [pc, #476]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002160:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	e01d      	b.n	80021a4 <HAL_RCC_OscConfig+0xd4>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002170:	d10c      	bne.n	800218c <HAL_RCC_OscConfig+0xbc>
 8002172:	4b72      	ldr	r3, [pc, #456]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a71      	ldr	r2, [pc, #452]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002178:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800217c:	6013      	str	r3, [r2, #0]
 800217e:	4b6f      	ldr	r3, [pc, #444]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a6e      	ldr	r2, [pc, #440]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002184:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	e00b      	b.n	80021a4 <HAL_RCC_OscConfig+0xd4>
 800218c:	4b6b      	ldr	r3, [pc, #428]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a6a      	ldr	r2, [pc, #424]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002192:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002196:	6013      	str	r3, [r2, #0]
 8002198:	4b68      	ldr	r3, [pc, #416]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a67      	ldr	r2, [pc, #412]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 800219e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d013      	beq.n	80021d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ac:	f7ff fcb4 	bl	8001b18 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b4:	f7ff fcb0 	bl	8001b18 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b64      	cmp	r3, #100	@ 0x64
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e200      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c6:	4b5d      	ldr	r3, [pc, #372]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0f0      	beq.n	80021b4 <HAL_RCC_OscConfig+0xe4>
 80021d2:	e014      	b.n	80021fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d4:	f7ff fca0 	bl	8001b18 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021dc:	f7ff fc9c 	bl	8001b18 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b64      	cmp	r3, #100	@ 0x64
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e1ec      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ee:	4b53      	ldr	r3, [pc, #332]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1f0      	bne.n	80021dc <HAL_RCC_OscConfig+0x10c>
 80021fa:	e000      	b.n	80021fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d063      	beq.n	80022d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800220a:	4b4c      	ldr	r3, [pc, #304]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f003 030c 	and.w	r3, r3, #12
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00b      	beq.n	800222e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002216:	4b49      	ldr	r3, [pc, #292]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 030c 	and.w	r3, r3, #12
 800221e:	2b08      	cmp	r3, #8
 8002220:	d11c      	bne.n	800225c <HAL_RCC_OscConfig+0x18c>
 8002222:	4b46      	ldr	r3, [pc, #280]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d116      	bne.n	800225c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800222e:	4b43      	ldr	r3, [pc, #268]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d005      	beq.n	8002246 <HAL_RCC_OscConfig+0x176>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d001      	beq.n	8002246 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e1c0      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002246:	4b3d      	ldr	r3, [pc, #244]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	4939      	ldr	r1, [pc, #228]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002256:	4313      	orrs	r3, r2
 8002258:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800225a:	e03a      	b.n	80022d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d020      	beq.n	80022a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002264:	4b36      	ldr	r3, [pc, #216]	@ (8002340 <HAL_RCC_OscConfig+0x270>)
 8002266:	2201      	movs	r2, #1
 8002268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226a:	f7ff fc55 	bl	8001b18 <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002270:	e008      	b.n	8002284 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002272:	f7ff fc51 	bl	8001b18 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e1a1      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002284:	4b2d      	ldr	r3, [pc, #180]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d0f0      	beq.n	8002272 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002290:	4b2a      	ldr	r3, [pc, #168]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	695b      	ldr	r3, [r3, #20]
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	4927      	ldr	r1, [pc, #156]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	600b      	str	r3, [r1, #0]
 80022a4:	e015      	b.n	80022d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022a6:	4b26      	ldr	r3, [pc, #152]	@ (8002340 <HAL_RCC_OscConfig+0x270>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ac:	f7ff fc34 	bl	8001b18 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022b4:	f7ff fc30 	bl	8001b18 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e180      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022c6:	4b1d      	ldr	r3, [pc, #116]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f0      	bne.n	80022b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0308 	and.w	r3, r3, #8
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d03a      	beq.n	8002354 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d019      	beq.n	800231a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022e6:	4b17      	ldr	r3, [pc, #92]	@ (8002344 <HAL_RCC_OscConfig+0x274>)
 80022e8:	2201      	movs	r2, #1
 80022ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ec:	f7ff fc14 	bl	8001b18 <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022f4:	f7ff fc10 	bl	8001b18 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e160      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002306:	4b0d      	ldr	r3, [pc, #52]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0f0      	beq.n	80022f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002312:	2001      	movs	r0, #1
 8002314:	f000 fa9c 	bl	8002850 <RCC_Delay>
 8002318:	e01c      	b.n	8002354 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800231a:	4b0a      	ldr	r3, [pc, #40]	@ (8002344 <HAL_RCC_OscConfig+0x274>)
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002320:	f7ff fbfa 	bl	8001b18 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002326:	e00f      	b.n	8002348 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002328:	f7ff fbf6 	bl	8001b18 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d908      	bls.n	8002348 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e146      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
 800233a:	bf00      	nop
 800233c:	40021000 	.word	0x40021000
 8002340:	42420000 	.word	0x42420000
 8002344:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002348:	4b92      	ldr	r3, [pc, #584]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 800234a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1e9      	bne.n	8002328 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0304 	and.w	r3, r3, #4
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 80a6 	beq.w	80024ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002362:	2300      	movs	r3, #0
 8002364:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002366:	4b8b      	ldr	r3, [pc, #556]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10d      	bne.n	800238e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002372:	4b88      	ldr	r3, [pc, #544]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	4a87      	ldr	r2, [pc, #540]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002378:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800237c:	61d3      	str	r3, [r2, #28]
 800237e:	4b85      	ldr	r3, [pc, #532]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002380:	69db      	ldr	r3, [r3, #28]
 8002382:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002386:	60bb      	str	r3, [r7, #8]
 8002388:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800238a:	2301      	movs	r3, #1
 800238c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238e:	4b82      	ldr	r3, [pc, #520]	@ (8002598 <HAL_RCC_OscConfig+0x4c8>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002396:	2b00      	cmp	r3, #0
 8002398:	d118      	bne.n	80023cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800239a:	4b7f      	ldr	r3, [pc, #508]	@ (8002598 <HAL_RCC_OscConfig+0x4c8>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a7e      	ldr	r2, [pc, #504]	@ (8002598 <HAL_RCC_OscConfig+0x4c8>)
 80023a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023a6:	f7ff fbb7 	bl	8001b18 <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ae:	f7ff fbb3 	bl	8001b18 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b64      	cmp	r3, #100	@ 0x64
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e103      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c0:	4b75      	ldr	r3, [pc, #468]	@ (8002598 <HAL_RCC_OscConfig+0x4c8>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0f0      	beq.n	80023ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d106      	bne.n	80023e2 <HAL_RCC_OscConfig+0x312>
 80023d4:	4b6f      	ldr	r3, [pc, #444]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	4a6e      	ldr	r2, [pc, #440]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 80023da:	f043 0301 	orr.w	r3, r3, #1
 80023de:	6213      	str	r3, [r2, #32]
 80023e0:	e02d      	b.n	800243e <HAL_RCC_OscConfig+0x36e>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10c      	bne.n	8002404 <HAL_RCC_OscConfig+0x334>
 80023ea:	4b6a      	ldr	r3, [pc, #424]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	4a69      	ldr	r2, [pc, #420]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 80023f0:	f023 0301 	bic.w	r3, r3, #1
 80023f4:	6213      	str	r3, [r2, #32]
 80023f6:	4b67      	ldr	r3, [pc, #412]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	4a66      	ldr	r2, [pc, #408]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 80023fc:	f023 0304 	bic.w	r3, r3, #4
 8002400:	6213      	str	r3, [r2, #32]
 8002402:	e01c      	b.n	800243e <HAL_RCC_OscConfig+0x36e>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	2b05      	cmp	r3, #5
 800240a:	d10c      	bne.n	8002426 <HAL_RCC_OscConfig+0x356>
 800240c:	4b61      	ldr	r3, [pc, #388]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	4a60      	ldr	r2, [pc, #384]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002412:	f043 0304 	orr.w	r3, r3, #4
 8002416:	6213      	str	r3, [r2, #32]
 8002418:	4b5e      	ldr	r3, [pc, #376]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	4a5d      	ldr	r2, [pc, #372]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 800241e:	f043 0301 	orr.w	r3, r3, #1
 8002422:	6213      	str	r3, [r2, #32]
 8002424:	e00b      	b.n	800243e <HAL_RCC_OscConfig+0x36e>
 8002426:	4b5b      	ldr	r3, [pc, #364]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	4a5a      	ldr	r2, [pc, #360]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 800242c:	f023 0301 	bic.w	r3, r3, #1
 8002430:	6213      	str	r3, [r2, #32]
 8002432:	4b58      	ldr	r3, [pc, #352]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	4a57      	ldr	r2, [pc, #348]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002438:	f023 0304 	bic.w	r3, r3, #4
 800243c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d015      	beq.n	8002472 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002446:	f7ff fb67 	bl	8001b18 <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800244c:	e00a      	b.n	8002464 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800244e:	f7ff fb63 	bl	8001b18 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	f241 3288 	movw	r2, #5000	@ 0x1388
 800245c:	4293      	cmp	r3, r2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e0b1      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002464:	4b4b      	ldr	r3, [pc, #300]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0ee      	beq.n	800244e <HAL_RCC_OscConfig+0x37e>
 8002470:	e014      	b.n	800249c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002472:	f7ff fb51 	bl	8001b18 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002478:	e00a      	b.n	8002490 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800247a:	f7ff fb4d 	bl	8001b18 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002488:	4293      	cmp	r3, r2
 800248a:	d901      	bls.n	8002490 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e09b      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002490:	4b40      	ldr	r3, [pc, #256]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1ee      	bne.n	800247a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800249c:	7dfb      	ldrb	r3, [r7, #23]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d105      	bne.n	80024ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024a2:	4b3c      	ldr	r3, [pc, #240]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	4a3b      	ldr	r2, [pc, #236]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 80024a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f000 8087 	beq.w	80025c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024b8:	4b36      	ldr	r3, [pc, #216]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 030c 	and.w	r3, r3, #12
 80024c0:	2b08      	cmp	r3, #8
 80024c2:	d061      	beq.n	8002588 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	69db      	ldr	r3, [r3, #28]
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d146      	bne.n	800255a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024cc:	4b33      	ldr	r3, [pc, #204]	@ (800259c <HAL_RCC_OscConfig+0x4cc>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d2:	f7ff fb21 	bl	8001b18 <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024da:	f7ff fb1d 	bl	8001b18 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e06d      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ec:	4b29      	ldr	r3, [pc, #164]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1f0      	bne.n	80024da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002500:	d108      	bne.n	8002514 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002502:	4b24      	ldr	r3, [pc, #144]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	4921      	ldr	r1, [pc, #132]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002510:	4313      	orrs	r3, r2
 8002512:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002514:	4b1f      	ldr	r3, [pc, #124]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a19      	ldr	r1, [r3, #32]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002524:	430b      	orrs	r3, r1
 8002526:	491b      	ldr	r1, [pc, #108]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002528:	4313      	orrs	r3, r2
 800252a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800252c:	4b1b      	ldr	r3, [pc, #108]	@ (800259c <HAL_RCC_OscConfig+0x4cc>)
 800252e:	2201      	movs	r2, #1
 8002530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002532:	f7ff faf1 	bl	8001b18 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002538:	e008      	b.n	800254c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800253a:	f7ff faed 	bl	8001b18 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e03d      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800254c:	4b11      	ldr	r3, [pc, #68]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d0f0      	beq.n	800253a <HAL_RCC_OscConfig+0x46a>
 8002558:	e035      	b.n	80025c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800255a:	4b10      	ldr	r3, [pc, #64]	@ (800259c <HAL_RCC_OscConfig+0x4cc>)
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002560:	f7ff fada 	bl	8001b18 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002568:	f7ff fad6 	bl	8001b18 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e026      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800257a:	4b06      	ldr	r3, [pc, #24]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1f0      	bne.n	8002568 <HAL_RCC_OscConfig+0x498>
 8002586:	e01e      	b.n	80025c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	69db      	ldr	r3, [r3, #28]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d107      	bne.n	80025a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e019      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
 8002594:	40021000 	.word	0x40021000
 8002598:	40007000 	.word	0x40007000
 800259c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025a0:	4b0b      	ldr	r3, [pc, #44]	@ (80025d0 <HAL_RCC_OscConfig+0x500>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d106      	bne.n	80025c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025be:	429a      	cmp	r2, r3
 80025c0:	d001      	beq.n	80025c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e000      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3718      	adds	r7, #24
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40021000 	.word	0x40021000

080025d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e0d0      	b.n	800278a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025e8:	4b6a      	ldr	r3, [pc, #424]	@ (8002794 <HAL_RCC_ClockConfig+0x1c0>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d910      	bls.n	8002618 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f6:	4b67      	ldr	r3, [pc, #412]	@ (8002794 <HAL_RCC_ClockConfig+0x1c0>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f023 0207 	bic.w	r2, r3, #7
 80025fe:	4965      	ldr	r1, [pc, #404]	@ (8002794 <HAL_RCC_ClockConfig+0x1c0>)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	4313      	orrs	r3, r2
 8002604:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002606:	4b63      	ldr	r3, [pc, #396]	@ (8002794 <HAL_RCC_ClockConfig+0x1c0>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	429a      	cmp	r2, r3
 8002612:	d001      	beq.n	8002618 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e0b8      	b.n	800278a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d020      	beq.n	8002666 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	2b00      	cmp	r3, #0
 800262e:	d005      	beq.n	800263c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002630:	4b59      	ldr	r3, [pc, #356]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	4a58      	ldr	r2, [pc, #352]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 8002636:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800263a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0308 	and.w	r3, r3, #8
 8002644:	2b00      	cmp	r3, #0
 8002646:	d005      	beq.n	8002654 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002648:	4b53      	ldr	r3, [pc, #332]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	4a52      	ldr	r2, [pc, #328]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 800264e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002652:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002654:	4b50      	ldr	r3, [pc, #320]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	494d      	ldr	r1, [pc, #308]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 8002662:	4313      	orrs	r3, r2
 8002664:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	d040      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d107      	bne.n	800268a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800267a:	4b47      	ldr	r3, [pc, #284]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d115      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e07f      	b.n	800278a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b02      	cmp	r3, #2
 8002690:	d107      	bne.n	80026a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002692:	4b41      	ldr	r3, [pc, #260]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d109      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e073      	b.n	800278a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e06b      	b.n	800278a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026b2:	4b39      	ldr	r3, [pc, #228]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f023 0203 	bic.w	r2, r3, #3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	4936      	ldr	r1, [pc, #216]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026c4:	f7ff fa28 	bl	8001b18 <HAL_GetTick>
 80026c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ca:	e00a      	b.n	80026e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026cc:	f7ff fa24 	bl	8001b18 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026da:	4293      	cmp	r3, r2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e053      	b.n	800278a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e2:	4b2d      	ldr	r3, [pc, #180]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f003 020c 	and.w	r2, r3, #12
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d1eb      	bne.n	80026cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026f4:	4b27      	ldr	r3, [pc, #156]	@ (8002794 <HAL_RCC_ClockConfig+0x1c0>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d210      	bcs.n	8002724 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002702:	4b24      	ldr	r3, [pc, #144]	@ (8002794 <HAL_RCC_ClockConfig+0x1c0>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f023 0207 	bic.w	r2, r3, #7
 800270a:	4922      	ldr	r1, [pc, #136]	@ (8002794 <HAL_RCC_ClockConfig+0x1c0>)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	4313      	orrs	r3, r2
 8002710:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002712:	4b20      	ldr	r3, [pc, #128]	@ (8002794 <HAL_RCC_ClockConfig+0x1c0>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	429a      	cmp	r2, r3
 800271e:	d001      	beq.n	8002724 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e032      	b.n	800278a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0304 	and.w	r3, r3, #4
 800272c:	2b00      	cmp	r3, #0
 800272e:	d008      	beq.n	8002742 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002730:	4b19      	ldr	r3, [pc, #100]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	4916      	ldr	r1, [pc, #88]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 800273e:	4313      	orrs	r3, r2
 8002740:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0308 	and.w	r3, r3, #8
 800274a:	2b00      	cmp	r3, #0
 800274c:	d009      	beq.n	8002762 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800274e:	4b12      	ldr	r3, [pc, #72]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	490e      	ldr	r1, [pc, #56]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 800275e:	4313      	orrs	r3, r2
 8002760:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002762:	f000 f821 	bl	80027a8 <HAL_RCC_GetSysClockFreq>
 8002766:	4602      	mov	r2, r0
 8002768:	4b0b      	ldr	r3, [pc, #44]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	091b      	lsrs	r3, r3, #4
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	490a      	ldr	r1, [pc, #40]	@ (800279c <HAL_RCC_ClockConfig+0x1c8>)
 8002774:	5ccb      	ldrb	r3, [r1, r3]
 8002776:	fa22 f303 	lsr.w	r3, r2, r3
 800277a:	4a09      	ldr	r2, [pc, #36]	@ (80027a0 <HAL_RCC_ClockConfig+0x1cc>)
 800277c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800277e:	4b09      	ldr	r3, [pc, #36]	@ (80027a4 <HAL_RCC_ClockConfig+0x1d0>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff f986 	bl	8001a94 <HAL_InitTick>

  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40022000 	.word	0x40022000
 8002798:	40021000 	.word	0x40021000
 800279c:	080032f0 	.word	0x080032f0
 80027a0:	20000044 	.word	0x20000044
 80027a4:	20000060 	.word	0x20000060

080027a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b087      	sub	sp, #28
 80027ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027ae:	2300      	movs	r3, #0
 80027b0:	60fb      	str	r3, [r7, #12]
 80027b2:	2300      	movs	r3, #0
 80027b4:	60bb      	str	r3, [r7, #8]
 80027b6:	2300      	movs	r3, #0
 80027b8:	617b      	str	r3, [r7, #20]
 80027ba:	2300      	movs	r3, #0
 80027bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80027be:	2300      	movs	r3, #0
 80027c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027c2:	4b1e      	ldr	r3, [pc, #120]	@ (800283c <HAL_RCC_GetSysClockFreq+0x94>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f003 030c 	and.w	r3, r3, #12
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	d002      	beq.n	80027d8 <HAL_RCC_GetSysClockFreq+0x30>
 80027d2:	2b08      	cmp	r3, #8
 80027d4:	d003      	beq.n	80027de <HAL_RCC_GetSysClockFreq+0x36>
 80027d6:	e027      	b.n	8002828 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027d8:	4b19      	ldr	r3, [pc, #100]	@ (8002840 <HAL_RCC_GetSysClockFreq+0x98>)
 80027da:	613b      	str	r3, [r7, #16]
      break;
 80027dc:	e027      	b.n	800282e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	0c9b      	lsrs	r3, r3, #18
 80027e2:	f003 030f 	and.w	r3, r3, #15
 80027e6:	4a17      	ldr	r2, [pc, #92]	@ (8002844 <HAL_RCC_GetSysClockFreq+0x9c>)
 80027e8:	5cd3      	ldrb	r3, [r2, r3]
 80027ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d010      	beq.n	8002818 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027f6:	4b11      	ldr	r3, [pc, #68]	@ (800283c <HAL_RCC_GetSysClockFreq+0x94>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	0c5b      	lsrs	r3, r3, #17
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	4a11      	ldr	r2, [pc, #68]	@ (8002848 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002802:	5cd3      	ldrb	r3, [r2, r3]
 8002804:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a0d      	ldr	r2, [pc, #52]	@ (8002840 <HAL_RCC_GetSysClockFreq+0x98>)
 800280a:	fb03 f202 	mul.w	r2, r3, r2
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	fbb2 f3f3 	udiv	r3, r2, r3
 8002814:	617b      	str	r3, [r7, #20]
 8002816:	e004      	b.n	8002822 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a0c      	ldr	r2, [pc, #48]	@ (800284c <HAL_RCC_GetSysClockFreq+0xa4>)
 800281c:	fb02 f303 	mul.w	r3, r2, r3
 8002820:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	613b      	str	r3, [r7, #16]
      break;
 8002826:	e002      	b.n	800282e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002828:	4b05      	ldr	r3, [pc, #20]	@ (8002840 <HAL_RCC_GetSysClockFreq+0x98>)
 800282a:	613b      	str	r3, [r7, #16]
      break;
 800282c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800282e:	693b      	ldr	r3, [r7, #16]
}
 8002830:	4618      	mov	r0, r3
 8002832:	371c      	adds	r7, #28
 8002834:	46bd      	mov	sp, r7
 8002836:	bc80      	pop	{r7}
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	40021000 	.word	0x40021000
 8002840:	007a1200 	.word	0x007a1200
 8002844:	08003300 	.word	0x08003300
 8002848:	08003310 	.word	0x08003310
 800284c:	003d0900 	.word	0x003d0900

08002850 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002858:	4b0a      	ldr	r3, [pc, #40]	@ (8002884 <RCC_Delay+0x34>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a0a      	ldr	r2, [pc, #40]	@ (8002888 <RCC_Delay+0x38>)
 800285e:	fba2 2303 	umull	r2, r3, r2, r3
 8002862:	0a5b      	lsrs	r3, r3, #9
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	fb02 f303 	mul.w	r3, r2, r3
 800286a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800286c:	bf00      	nop
  }
  while (Delay --);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	1e5a      	subs	r2, r3, #1
 8002872:	60fa      	str	r2, [r7, #12]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1f9      	bne.n	800286c <RCC_Delay+0x1c>
}
 8002878:	bf00      	nop
 800287a:	bf00      	nop
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr
 8002884:	20000044 	.word	0x20000044
 8002888:	10624dd3 	.word	0x10624dd3

0800288c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e041      	b.n	8002922 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d106      	bne.n	80028b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7fe ff30 	bl	8001718 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2202      	movs	r2, #2
 80028bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	3304      	adds	r3, #4
 80028c8:	4619      	mov	r1, r3
 80028ca:	4610      	mov	r0, r2
 80028cc:	f000 fa56 	bl	8002d7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
	...

0800292c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800293a:	b2db      	uxtb	r3, r3
 800293c:	2b01      	cmp	r3, #1
 800293e:	d001      	beq.n	8002944 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e035      	b.n	80029b0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2202      	movs	r2, #2
 8002948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68da      	ldr	r2, [r3, #12]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f042 0201 	orr.w	r2, r2, #1
 800295a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a16      	ldr	r2, [pc, #88]	@ (80029bc <HAL_TIM_Base_Start_IT+0x90>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d009      	beq.n	800297a <HAL_TIM_Base_Start_IT+0x4e>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800296e:	d004      	beq.n	800297a <HAL_TIM_Base_Start_IT+0x4e>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a12      	ldr	r2, [pc, #72]	@ (80029c0 <HAL_TIM_Base_Start_IT+0x94>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d111      	bne.n	800299e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f003 0307 	and.w	r3, r3, #7
 8002984:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2b06      	cmp	r3, #6
 800298a:	d010      	beq.n	80029ae <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f042 0201 	orr.w	r2, r2, #1
 800299a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800299c:	e007      	b.n	80029ae <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f042 0201 	orr.w	r2, r2, #1
 80029ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3714      	adds	r7, #20
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bc80      	pop	{r7}
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	40012c00 	.word	0x40012c00
 80029c0:	40000400 	.word	0x40000400

080029c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d020      	beq.n	8002a28 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d01b      	beq.n	8002a28 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f06f 0202 	mvn.w	r2, #2
 80029f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	f003 0303 	and.w	r3, r3, #3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 f998 	bl	8002d44 <HAL_TIM_IC_CaptureCallback>
 8002a14:	e005      	b.n	8002a22 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f98b 	bl	8002d32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f000 f99a 	bl	8002d56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	f003 0304 	and.w	r3, r3, #4
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d020      	beq.n	8002a74 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f003 0304 	and.w	r3, r3, #4
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d01b      	beq.n	8002a74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f06f 0204 	mvn.w	r2, #4
 8002a44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2202      	movs	r2, #2
 8002a4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 f972 	bl	8002d44 <HAL_TIM_IC_CaptureCallback>
 8002a60:	e005      	b.n	8002a6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 f965 	bl	8002d32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 f974 	bl	8002d56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	f003 0308 	and.w	r3, r3, #8
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d020      	beq.n	8002ac0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f003 0308 	and.w	r3, r3, #8
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d01b      	beq.n	8002ac0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f06f 0208 	mvn.w	r2, #8
 8002a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2204      	movs	r2, #4
 8002a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	f003 0303 	and.w	r3, r3, #3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f94c 	bl	8002d44 <HAL_TIM_IC_CaptureCallback>
 8002aac:	e005      	b.n	8002aba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 f93f 	bl	8002d32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f000 f94e 	bl	8002d56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	f003 0310 	and.w	r3, r3, #16
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d020      	beq.n	8002b0c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f003 0310 	and.w	r3, r3, #16
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d01b      	beq.n	8002b0c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f06f 0210 	mvn.w	r2, #16
 8002adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2208      	movs	r2, #8
 8002ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f926 	bl	8002d44 <HAL_TIM_IC_CaptureCallback>
 8002af8:	e005      	b.n	8002b06 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f919 	bl	8002d32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 f928 	bl	8002d56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00c      	beq.n	8002b30 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d007      	beq.n	8002b30 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f06f 0201 	mvn.w	r2, #1
 8002b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7fe fc6e 	bl	800140c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00c      	beq.n	8002b54 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d007      	beq.n	8002b54 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 fa6f 	bl	8003032 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00c      	beq.n	8002b78 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d007      	beq.n	8002b78 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f8f8 	bl	8002d68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	f003 0320 	and.w	r3, r3, #32
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00c      	beq.n	8002b9c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f003 0320 	and.w	r3, r3, #32
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d007      	beq.n	8002b9c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f06f 0220 	mvn.w	r2, #32
 8002b94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 fa42 	bl	8003020 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b9c:	bf00      	nop
 8002b9e:	3710      	adds	r7, #16
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d101      	bne.n	8002bc0 <HAL_TIM_ConfigClockSource+0x1c>
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	e0b4      	b.n	8002d2a <HAL_TIM_ConfigClockSource+0x186>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2202      	movs	r2, #2
 8002bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002bde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002be6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68ba      	ldr	r2, [r7, #8]
 8002bee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bf8:	d03e      	beq.n	8002c78 <HAL_TIM_ConfigClockSource+0xd4>
 8002bfa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bfe:	f200 8087 	bhi.w	8002d10 <HAL_TIM_ConfigClockSource+0x16c>
 8002c02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c06:	f000 8086 	beq.w	8002d16 <HAL_TIM_ConfigClockSource+0x172>
 8002c0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c0e:	d87f      	bhi.n	8002d10 <HAL_TIM_ConfigClockSource+0x16c>
 8002c10:	2b70      	cmp	r3, #112	@ 0x70
 8002c12:	d01a      	beq.n	8002c4a <HAL_TIM_ConfigClockSource+0xa6>
 8002c14:	2b70      	cmp	r3, #112	@ 0x70
 8002c16:	d87b      	bhi.n	8002d10 <HAL_TIM_ConfigClockSource+0x16c>
 8002c18:	2b60      	cmp	r3, #96	@ 0x60
 8002c1a:	d050      	beq.n	8002cbe <HAL_TIM_ConfigClockSource+0x11a>
 8002c1c:	2b60      	cmp	r3, #96	@ 0x60
 8002c1e:	d877      	bhi.n	8002d10 <HAL_TIM_ConfigClockSource+0x16c>
 8002c20:	2b50      	cmp	r3, #80	@ 0x50
 8002c22:	d03c      	beq.n	8002c9e <HAL_TIM_ConfigClockSource+0xfa>
 8002c24:	2b50      	cmp	r3, #80	@ 0x50
 8002c26:	d873      	bhi.n	8002d10 <HAL_TIM_ConfigClockSource+0x16c>
 8002c28:	2b40      	cmp	r3, #64	@ 0x40
 8002c2a:	d058      	beq.n	8002cde <HAL_TIM_ConfigClockSource+0x13a>
 8002c2c:	2b40      	cmp	r3, #64	@ 0x40
 8002c2e:	d86f      	bhi.n	8002d10 <HAL_TIM_ConfigClockSource+0x16c>
 8002c30:	2b30      	cmp	r3, #48	@ 0x30
 8002c32:	d064      	beq.n	8002cfe <HAL_TIM_ConfigClockSource+0x15a>
 8002c34:	2b30      	cmp	r3, #48	@ 0x30
 8002c36:	d86b      	bhi.n	8002d10 <HAL_TIM_ConfigClockSource+0x16c>
 8002c38:	2b20      	cmp	r3, #32
 8002c3a:	d060      	beq.n	8002cfe <HAL_TIM_ConfigClockSource+0x15a>
 8002c3c:	2b20      	cmp	r3, #32
 8002c3e:	d867      	bhi.n	8002d10 <HAL_TIM_ConfigClockSource+0x16c>
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d05c      	beq.n	8002cfe <HAL_TIM_ConfigClockSource+0x15a>
 8002c44:	2b10      	cmp	r3, #16
 8002c46:	d05a      	beq.n	8002cfe <HAL_TIM_ConfigClockSource+0x15a>
 8002c48:	e062      	b.n	8002d10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c5a:	f000 f96a 	bl	8002f32 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002c6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	609a      	str	r2, [r3, #8]
      break;
 8002c76:	e04f      	b.n	8002d18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c88:	f000 f953 	bl	8002f32 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	689a      	ldr	r2, [r3, #8]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c9a:	609a      	str	r2, [r3, #8]
      break;
 8002c9c:	e03c      	b.n	8002d18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002caa:	461a      	mov	r2, r3
 8002cac:	f000 f8ca 	bl	8002e44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2150      	movs	r1, #80	@ 0x50
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 f921 	bl	8002efe <TIM_ITRx_SetConfig>
      break;
 8002cbc:	e02c      	b.n	8002d18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cca:	461a      	mov	r2, r3
 8002ccc:	f000 f8e8 	bl	8002ea0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2160      	movs	r1, #96	@ 0x60
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f000 f911 	bl	8002efe <TIM_ITRx_SetConfig>
      break;
 8002cdc:	e01c      	b.n	8002d18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cea:	461a      	mov	r2, r3
 8002cec:	f000 f8aa 	bl	8002e44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2140      	movs	r1, #64	@ 0x40
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f000 f901 	bl	8002efe <TIM_ITRx_SetConfig>
      break;
 8002cfc:	e00c      	b.n	8002d18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4619      	mov	r1, r3
 8002d08:	4610      	mov	r0, r2
 8002d0a:	f000 f8f8 	bl	8002efe <TIM_ITRx_SetConfig>
      break;
 8002d0e:	e003      	b.n	8002d18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	73fb      	strb	r3, [r7, #15]
      break;
 8002d14:	e000      	b.n	8002d18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr

08002d44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bc80      	pop	{r7}
 8002d54:	4770      	bx	lr

08002d56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bc80      	pop	{r7}
 8002d66:	4770      	bx	lr

08002d68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bc80      	pop	{r7}
 8002d78:	4770      	bx	lr
	...

08002d7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a2b      	ldr	r2, [pc, #172]	@ (8002e3c <TIM_Base_SetConfig+0xc0>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d007      	beq.n	8002da4 <TIM_Base_SetConfig+0x28>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d9a:	d003      	beq.n	8002da4 <TIM_Base_SetConfig+0x28>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a28      	ldr	r2, [pc, #160]	@ (8002e40 <TIM_Base_SetConfig+0xc4>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d108      	bne.n	8002db6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002daa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a20      	ldr	r2, [pc, #128]	@ (8002e3c <TIM_Base_SetConfig+0xc0>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d007      	beq.n	8002dce <TIM_Base_SetConfig+0x52>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dc4:	d003      	beq.n	8002dce <TIM_Base_SetConfig+0x52>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a1d      	ldr	r2, [pc, #116]	@ (8002e40 <TIM_Base_SetConfig+0xc4>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d108      	bne.n	8002de0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002dd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68fa      	ldr	r2, [r7, #12]
 8002df2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	689a      	ldr	r2, [r3, #8]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a0d      	ldr	r2, [pc, #52]	@ (8002e3c <TIM_Base_SetConfig+0xc0>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d103      	bne.n	8002e14 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	691a      	ldr	r2, [r3, #16]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d005      	beq.n	8002e32 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	f023 0201 	bic.w	r2, r3, #1
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	611a      	str	r2, [r3, #16]
  }
}
 8002e32:	bf00      	nop
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bc80      	pop	{r7}
 8002e3a:	4770      	bx	lr
 8002e3c:	40012c00 	.word	0x40012c00
 8002e40:	40000400 	.word	0x40000400

08002e44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b087      	sub	sp, #28
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	f023 0201 	bic.w	r2, r3, #1
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	011b      	lsls	r3, r3, #4
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	f023 030a 	bic.w	r3, r3, #10
 8002e80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	621a      	str	r2, [r3, #32]
}
 8002e96:	bf00      	nop
 8002e98:	371c      	adds	r7, #28
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bc80      	pop	{r7}
 8002e9e:	4770      	bx	lr

08002ea0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b087      	sub	sp, #28
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	f023 0210 	bic.w	r2, r3, #16
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002eca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	031b      	lsls	r3, r3, #12
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002edc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	011b      	lsls	r3, r3, #4
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	621a      	str	r2, [r3, #32]
}
 8002ef4:	bf00      	nop
 8002ef6:	371c      	adds	r7, #28
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bc80      	pop	{r7}
 8002efc:	4770      	bx	lr

08002efe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002efe:	b480      	push	{r7}
 8002f00:	b085      	sub	sp, #20
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
 8002f06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	f043 0307 	orr.w	r3, r3, #7
 8002f20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	609a      	str	r2, [r3, #8]
}
 8002f28:	bf00      	nop
 8002f2a:	3714      	adds	r7, #20
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bc80      	pop	{r7}
 8002f30:	4770      	bx	lr

08002f32 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b087      	sub	sp, #28
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	60f8      	str	r0, [r7, #12]
 8002f3a:	60b9      	str	r1, [r7, #8]
 8002f3c:	607a      	str	r2, [r7, #4]
 8002f3e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002f4c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	021a      	lsls	r2, r3, #8
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	431a      	orrs	r2, r3
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	609a      	str	r2, [r3, #8]
}
 8002f66:	bf00      	nop
 8002f68:	371c      	adds	r7, #28
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bc80      	pop	{r7}
 8002f6e:	4770      	bx	lr

08002f70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d101      	bne.n	8002f88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f84:	2302      	movs	r3, #2
 8002f86:	e041      	b.n	800300c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2202      	movs	r2, #2
 8002f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a14      	ldr	r2, [pc, #80]	@ (8003018 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d009      	beq.n	8002fe0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fd4:	d004      	beq.n	8002fe0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a10      	ldr	r2, [pc, #64]	@ (800301c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d10c      	bne.n	8002ffa <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fe6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	68ba      	ldr	r2, [r7, #8]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	3714      	adds	r7, #20
 8003010:	46bd      	mov	sp, r7
 8003012:	bc80      	pop	{r7}
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	40012c00 	.word	0x40012c00
 800301c:	40000400 	.word	0x40000400

08003020 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	bc80      	pop	{r7}
 8003030:	4770      	bx	lr

08003032 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003032:	b480      	push	{r7}
 8003034:	b083      	sub	sp, #12
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	bc80      	pop	{r7}
 8003042:	4770      	bx	lr

08003044 <malloc>:
 8003044:	4b02      	ldr	r3, [pc, #8]	@ (8003050 <malloc+0xc>)
 8003046:	4601      	mov	r1, r0
 8003048:	6818      	ldr	r0, [r3, #0]
 800304a:	f000 b82d 	b.w	80030a8 <_malloc_r>
 800304e:	bf00      	nop
 8003050:	20000068 	.word	0x20000068

08003054 <free>:
 8003054:	4b02      	ldr	r3, [pc, #8]	@ (8003060 <free+0xc>)
 8003056:	4601      	mov	r1, r0
 8003058:	6818      	ldr	r0, [r3, #0]
 800305a:	f000 b8f5 	b.w	8003248 <_free_r>
 800305e:	bf00      	nop
 8003060:	20000068 	.word	0x20000068

08003064 <sbrk_aligned>:
 8003064:	b570      	push	{r4, r5, r6, lr}
 8003066:	4e0f      	ldr	r6, [pc, #60]	@ (80030a4 <sbrk_aligned+0x40>)
 8003068:	460c      	mov	r4, r1
 800306a:	6831      	ldr	r1, [r6, #0]
 800306c:	4605      	mov	r5, r0
 800306e:	b911      	cbnz	r1, 8003076 <sbrk_aligned+0x12>
 8003070:	f000 f8ae 	bl	80031d0 <_sbrk_r>
 8003074:	6030      	str	r0, [r6, #0]
 8003076:	4621      	mov	r1, r4
 8003078:	4628      	mov	r0, r5
 800307a:	f000 f8a9 	bl	80031d0 <_sbrk_r>
 800307e:	1c43      	adds	r3, r0, #1
 8003080:	d103      	bne.n	800308a <sbrk_aligned+0x26>
 8003082:	f04f 34ff 	mov.w	r4, #4294967295
 8003086:	4620      	mov	r0, r4
 8003088:	bd70      	pop	{r4, r5, r6, pc}
 800308a:	1cc4      	adds	r4, r0, #3
 800308c:	f024 0403 	bic.w	r4, r4, #3
 8003090:	42a0      	cmp	r0, r4
 8003092:	d0f8      	beq.n	8003086 <sbrk_aligned+0x22>
 8003094:	1a21      	subs	r1, r4, r0
 8003096:	4628      	mov	r0, r5
 8003098:	f000 f89a 	bl	80031d0 <_sbrk_r>
 800309c:	3001      	adds	r0, #1
 800309e:	d1f2      	bne.n	8003086 <sbrk_aligned+0x22>
 80030a0:	e7ef      	b.n	8003082 <sbrk_aligned+0x1e>
 80030a2:	bf00      	nop
 80030a4:	20000164 	.word	0x20000164

080030a8 <_malloc_r>:
 80030a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80030ac:	1ccd      	adds	r5, r1, #3
 80030ae:	f025 0503 	bic.w	r5, r5, #3
 80030b2:	3508      	adds	r5, #8
 80030b4:	2d0c      	cmp	r5, #12
 80030b6:	bf38      	it	cc
 80030b8:	250c      	movcc	r5, #12
 80030ba:	2d00      	cmp	r5, #0
 80030bc:	4606      	mov	r6, r0
 80030be:	db01      	blt.n	80030c4 <_malloc_r+0x1c>
 80030c0:	42a9      	cmp	r1, r5
 80030c2:	d904      	bls.n	80030ce <_malloc_r+0x26>
 80030c4:	230c      	movs	r3, #12
 80030c6:	6033      	str	r3, [r6, #0]
 80030c8:	2000      	movs	r0, #0
 80030ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80030ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80031a4 <_malloc_r+0xfc>
 80030d2:	f000 f869 	bl	80031a8 <__malloc_lock>
 80030d6:	f8d8 3000 	ldr.w	r3, [r8]
 80030da:	461c      	mov	r4, r3
 80030dc:	bb44      	cbnz	r4, 8003130 <_malloc_r+0x88>
 80030de:	4629      	mov	r1, r5
 80030e0:	4630      	mov	r0, r6
 80030e2:	f7ff ffbf 	bl	8003064 <sbrk_aligned>
 80030e6:	1c43      	adds	r3, r0, #1
 80030e8:	4604      	mov	r4, r0
 80030ea:	d158      	bne.n	800319e <_malloc_r+0xf6>
 80030ec:	f8d8 4000 	ldr.w	r4, [r8]
 80030f0:	4627      	mov	r7, r4
 80030f2:	2f00      	cmp	r7, #0
 80030f4:	d143      	bne.n	800317e <_malloc_r+0xd6>
 80030f6:	2c00      	cmp	r4, #0
 80030f8:	d04b      	beq.n	8003192 <_malloc_r+0xea>
 80030fa:	6823      	ldr	r3, [r4, #0]
 80030fc:	4639      	mov	r1, r7
 80030fe:	4630      	mov	r0, r6
 8003100:	eb04 0903 	add.w	r9, r4, r3
 8003104:	f000 f864 	bl	80031d0 <_sbrk_r>
 8003108:	4581      	cmp	r9, r0
 800310a:	d142      	bne.n	8003192 <_malloc_r+0xea>
 800310c:	6821      	ldr	r1, [r4, #0]
 800310e:	4630      	mov	r0, r6
 8003110:	1a6d      	subs	r5, r5, r1
 8003112:	4629      	mov	r1, r5
 8003114:	f7ff ffa6 	bl	8003064 <sbrk_aligned>
 8003118:	3001      	adds	r0, #1
 800311a:	d03a      	beq.n	8003192 <_malloc_r+0xea>
 800311c:	6823      	ldr	r3, [r4, #0]
 800311e:	442b      	add	r3, r5
 8003120:	6023      	str	r3, [r4, #0]
 8003122:	f8d8 3000 	ldr.w	r3, [r8]
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	bb62      	cbnz	r2, 8003184 <_malloc_r+0xdc>
 800312a:	f8c8 7000 	str.w	r7, [r8]
 800312e:	e00f      	b.n	8003150 <_malloc_r+0xa8>
 8003130:	6822      	ldr	r2, [r4, #0]
 8003132:	1b52      	subs	r2, r2, r5
 8003134:	d420      	bmi.n	8003178 <_malloc_r+0xd0>
 8003136:	2a0b      	cmp	r2, #11
 8003138:	d917      	bls.n	800316a <_malloc_r+0xc2>
 800313a:	1961      	adds	r1, r4, r5
 800313c:	42a3      	cmp	r3, r4
 800313e:	6025      	str	r5, [r4, #0]
 8003140:	bf18      	it	ne
 8003142:	6059      	strne	r1, [r3, #4]
 8003144:	6863      	ldr	r3, [r4, #4]
 8003146:	bf08      	it	eq
 8003148:	f8c8 1000 	streq.w	r1, [r8]
 800314c:	5162      	str	r2, [r4, r5]
 800314e:	604b      	str	r3, [r1, #4]
 8003150:	4630      	mov	r0, r6
 8003152:	f000 f82f 	bl	80031b4 <__malloc_unlock>
 8003156:	f104 000b 	add.w	r0, r4, #11
 800315a:	1d23      	adds	r3, r4, #4
 800315c:	f020 0007 	bic.w	r0, r0, #7
 8003160:	1ac2      	subs	r2, r0, r3
 8003162:	bf1c      	itt	ne
 8003164:	1a1b      	subne	r3, r3, r0
 8003166:	50a3      	strne	r3, [r4, r2]
 8003168:	e7af      	b.n	80030ca <_malloc_r+0x22>
 800316a:	6862      	ldr	r2, [r4, #4]
 800316c:	42a3      	cmp	r3, r4
 800316e:	bf0c      	ite	eq
 8003170:	f8c8 2000 	streq.w	r2, [r8]
 8003174:	605a      	strne	r2, [r3, #4]
 8003176:	e7eb      	b.n	8003150 <_malloc_r+0xa8>
 8003178:	4623      	mov	r3, r4
 800317a:	6864      	ldr	r4, [r4, #4]
 800317c:	e7ae      	b.n	80030dc <_malloc_r+0x34>
 800317e:	463c      	mov	r4, r7
 8003180:	687f      	ldr	r7, [r7, #4]
 8003182:	e7b6      	b.n	80030f2 <_malloc_r+0x4a>
 8003184:	461a      	mov	r2, r3
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	42a3      	cmp	r3, r4
 800318a:	d1fb      	bne.n	8003184 <_malloc_r+0xdc>
 800318c:	2300      	movs	r3, #0
 800318e:	6053      	str	r3, [r2, #4]
 8003190:	e7de      	b.n	8003150 <_malloc_r+0xa8>
 8003192:	230c      	movs	r3, #12
 8003194:	4630      	mov	r0, r6
 8003196:	6033      	str	r3, [r6, #0]
 8003198:	f000 f80c 	bl	80031b4 <__malloc_unlock>
 800319c:	e794      	b.n	80030c8 <_malloc_r+0x20>
 800319e:	6005      	str	r5, [r0, #0]
 80031a0:	e7d6      	b.n	8003150 <_malloc_r+0xa8>
 80031a2:	bf00      	nop
 80031a4:	20000168 	.word	0x20000168

080031a8 <__malloc_lock>:
 80031a8:	4801      	ldr	r0, [pc, #4]	@ (80031b0 <__malloc_lock+0x8>)
 80031aa:	f000 b84b 	b.w	8003244 <__retarget_lock_acquire_recursive>
 80031ae:	bf00      	nop
 80031b0:	200002a8 	.word	0x200002a8

080031b4 <__malloc_unlock>:
 80031b4:	4801      	ldr	r0, [pc, #4]	@ (80031bc <__malloc_unlock+0x8>)
 80031b6:	f000 b846 	b.w	8003246 <__retarget_lock_release_recursive>
 80031ba:	bf00      	nop
 80031bc:	200002a8 	.word	0x200002a8

080031c0 <memset>:
 80031c0:	4603      	mov	r3, r0
 80031c2:	4402      	add	r2, r0
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d100      	bne.n	80031ca <memset+0xa>
 80031c8:	4770      	bx	lr
 80031ca:	f803 1b01 	strb.w	r1, [r3], #1
 80031ce:	e7f9      	b.n	80031c4 <memset+0x4>

080031d0 <_sbrk_r>:
 80031d0:	b538      	push	{r3, r4, r5, lr}
 80031d2:	2300      	movs	r3, #0
 80031d4:	4d05      	ldr	r5, [pc, #20]	@ (80031ec <_sbrk_r+0x1c>)
 80031d6:	4604      	mov	r4, r0
 80031d8:	4608      	mov	r0, r1
 80031da:	602b      	str	r3, [r5, #0]
 80031dc:	f7fe faf6 	bl	80017cc <_sbrk>
 80031e0:	1c43      	adds	r3, r0, #1
 80031e2:	d102      	bne.n	80031ea <_sbrk_r+0x1a>
 80031e4:	682b      	ldr	r3, [r5, #0]
 80031e6:	b103      	cbz	r3, 80031ea <_sbrk_r+0x1a>
 80031e8:	6023      	str	r3, [r4, #0]
 80031ea:	bd38      	pop	{r3, r4, r5, pc}
 80031ec:	200002a4 	.word	0x200002a4

080031f0 <__errno>:
 80031f0:	4b01      	ldr	r3, [pc, #4]	@ (80031f8 <__errno+0x8>)
 80031f2:	6818      	ldr	r0, [r3, #0]
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	20000068 	.word	0x20000068

080031fc <__libc_init_array>:
 80031fc:	b570      	push	{r4, r5, r6, lr}
 80031fe:	2600      	movs	r6, #0
 8003200:	4d0c      	ldr	r5, [pc, #48]	@ (8003234 <__libc_init_array+0x38>)
 8003202:	4c0d      	ldr	r4, [pc, #52]	@ (8003238 <__libc_init_array+0x3c>)
 8003204:	1b64      	subs	r4, r4, r5
 8003206:	10a4      	asrs	r4, r4, #2
 8003208:	42a6      	cmp	r6, r4
 800320a:	d109      	bne.n	8003220 <__libc_init_array+0x24>
 800320c:	f000 f864 	bl	80032d8 <_init>
 8003210:	2600      	movs	r6, #0
 8003212:	4d0a      	ldr	r5, [pc, #40]	@ (800323c <__libc_init_array+0x40>)
 8003214:	4c0a      	ldr	r4, [pc, #40]	@ (8003240 <__libc_init_array+0x44>)
 8003216:	1b64      	subs	r4, r4, r5
 8003218:	10a4      	asrs	r4, r4, #2
 800321a:	42a6      	cmp	r6, r4
 800321c:	d105      	bne.n	800322a <__libc_init_array+0x2e>
 800321e:	bd70      	pop	{r4, r5, r6, pc}
 8003220:	f855 3b04 	ldr.w	r3, [r5], #4
 8003224:	4798      	blx	r3
 8003226:	3601      	adds	r6, #1
 8003228:	e7ee      	b.n	8003208 <__libc_init_array+0xc>
 800322a:	f855 3b04 	ldr.w	r3, [r5], #4
 800322e:	4798      	blx	r3
 8003230:	3601      	adds	r6, #1
 8003232:	e7f2      	b.n	800321a <__libc_init_array+0x1e>
 8003234:	08003314 	.word	0x08003314
 8003238:	08003314 	.word	0x08003314
 800323c:	08003314 	.word	0x08003314
 8003240:	08003318 	.word	0x08003318

08003244 <__retarget_lock_acquire_recursive>:
 8003244:	4770      	bx	lr

08003246 <__retarget_lock_release_recursive>:
 8003246:	4770      	bx	lr

08003248 <_free_r>:
 8003248:	b538      	push	{r3, r4, r5, lr}
 800324a:	4605      	mov	r5, r0
 800324c:	2900      	cmp	r1, #0
 800324e:	d040      	beq.n	80032d2 <_free_r+0x8a>
 8003250:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003254:	1f0c      	subs	r4, r1, #4
 8003256:	2b00      	cmp	r3, #0
 8003258:	bfb8      	it	lt
 800325a:	18e4      	addlt	r4, r4, r3
 800325c:	f7ff ffa4 	bl	80031a8 <__malloc_lock>
 8003260:	4a1c      	ldr	r2, [pc, #112]	@ (80032d4 <_free_r+0x8c>)
 8003262:	6813      	ldr	r3, [r2, #0]
 8003264:	b933      	cbnz	r3, 8003274 <_free_r+0x2c>
 8003266:	6063      	str	r3, [r4, #4]
 8003268:	6014      	str	r4, [r2, #0]
 800326a:	4628      	mov	r0, r5
 800326c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003270:	f7ff bfa0 	b.w	80031b4 <__malloc_unlock>
 8003274:	42a3      	cmp	r3, r4
 8003276:	d908      	bls.n	800328a <_free_r+0x42>
 8003278:	6820      	ldr	r0, [r4, #0]
 800327a:	1821      	adds	r1, r4, r0
 800327c:	428b      	cmp	r3, r1
 800327e:	bf01      	itttt	eq
 8003280:	6819      	ldreq	r1, [r3, #0]
 8003282:	685b      	ldreq	r3, [r3, #4]
 8003284:	1809      	addeq	r1, r1, r0
 8003286:	6021      	streq	r1, [r4, #0]
 8003288:	e7ed      	b.n	8003266 <_free_r+0x1e>
 800328a:	461a      	mov	r2, r3
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	b10b      	cbz	r3, 8003294 <_free_r+0x4c>
 8003290:	42a3      	cmp	r3, r4
 8003292:	d9fa      	bls.n	800328a <_free_r+0x42>
 8003294:	6811      	ldr	r1, [r2, #0]
 8003296:	1850      	adds	r0, r2, r1
 8003298:	42a0      	cmp	r0, r4
 800329a:	d10b      	bne.n	80032b4 <_free_r+0x6c>
 800329c:	6820      	ldr	r0, [r4, #0]
 800329e:	4401      	add	r1, r0
 80032a0:	1850      	adds	r0, r2, r1
 80032a2:	4283      	cmp	r3, r0
 80032a4:	6011      	str	r1, [r2, #0]
 80032a6:	d1e0      	bne.n	800326a <_free_r+0x22>
 80032a8:	6818      	ldr	r0, [r3, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	4408      	add	r0, r1
 80032ae:	6010      	str	r0, [r2, #0]
 80032b0:	6053      	str	r3, [r2, #4]
 80032b2:	e7da      	b.n	800326a <_free_r+0x22>
 80032b4:	d902      	bls.n	80032bc <_free_r+0x74>
 80032b6:	230c      	movs	r3, #12
 80032b8:	602b      	str	r3, [r5, #0]
 80032ba:	e7d6      	b.n	800326a <_free_r+0x22>
 80032bc:	6820      	ldr	r0, [r4, #0]
 80032be:	1821      	adds	r1, r4, r0
 80032c0:	428b      	cmp	r3, r1
 80032c2:	bf01      	itttt	eq
 80032c4:	6819      	ldreq	r1, [r3, #0]
 80032c6:	685b      	ldreq	r3, [r3, #4]
 80032c8:	1809      	addeq	r1, r1, r0
 80032ca:	6021      	streq	r1, [r4, #0]
 80032cc:	6063      	str	r3, [r4, #4]
 80032ce:	6054      	str	r4, [r2, #4]
 80032d0:	e7cb      	b.n	800326a <_free_r+0x22>
 80032d2:	bd38      	pop	{r3, r4, r5, pc}
 80032d4:	20000168 	.word	0x20000168

080032d8 <_init>:
 80032d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032da:	bf00      	nop
 80032dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032de:	bc08      	pop	{r3}
 80032e0:	469e      	mov	lr, r3
 80032e2:	4770      	bx	lr

080032e4 <_fini>:
 80032e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032e6:	bf00      	nop
 80032e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ea:	bc08      	pop	{r3}
 80032ec:	469e      	mov	lr, r3
 80032ee:	4770      	bx	lr
